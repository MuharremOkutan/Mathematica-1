
MATHEMATICA WARNING MESSAGES
____________________________


Mathematica is a registered trademark, and MathLink is a trademark
of Wolfram Research, Inc.

Unix is a registered trademark of AT. All other product names are
trademarks of their producers.

Copyright 1991 by Wolfram Research, Inc.
All rights reserved. No part of this document may be reproduced,
stored in a retrieval system, or transmitted, in any form or by
any means, electronic, mechanical, photocopying, recording or
otherwise, without the prior written permission of the copyright
holder.

Wolfram Research is the holder of the copyright to the Mathematica
software system described in this document, including without
limitation such aspects of the system as its code, structure,
sequence, organization, ``look and feel'', programming language
and compilation of command names. Use of the system unless pursuant
to the terms of a license granted by Wolfram Research or as otherwise
authorized by law is an infringement of the copyright.

Wolfram Research, Inc. makes no representations, express or implied,
with respect to this documentation or the software it describes,
including without limitations, any implied warranties of merchantability
or fitness for a particular purpose, all of which are expressly
disclaimed. Users should be aware that included in the terms and
conditions under which Wolfram Research is willing to license
Mathematica is a provision that Wolfram Research and its distribution
licensees, distributors and dealers shall in no event be liable
for any indirect, incidental or consequential damages, and that
liability for direct damages shall be limited to the amount of the
purchase price paid for Mathematica.

In addition to the foregoing, users should recognize that all
complex software systems and their documentation contain errors
and omissions. Wolfram Research shall not be responsible under any
circumstances for providing information on or corrections to errors
and omissions discovered at any time in this document or the software
it describes, whether or not they are aware of the errors or
omissions. Wolfram Research does not recommend the use of the
software described in this document for applications in which errors
or omissions could threaten life, injury or significant loss.



Introduction
============

This report contains a listing of all error messages associated
with built-in objects in Mathematica.  Each entry includes the name
and text of the message, along with a brief explanation of situations
in which the message might appear.  Many of the explanations include
examples of inputs that lead to the message and suggestions for
dealing with underlying problems.

Messages defined in Mathematica packages, and various system-dependent
messages, such as messages specific to particular hardware
configurations, are not included in this listing.  For questions
regarding these messages you should consult specialized documentation
or contact appropriate technical support personnel for assistance.


How to Use This Report
======================

When Mathematica generates an error message, the printed output
consists of a symbol, a message tag, and the text of the message,
in the form symbol::tag: message text.

This input results in the Sin::argx message, indicating that the
Sin function has received an incorrect number of arguments.

     In[1]:= Sin[ ]

     Sin::argx: Sin called with 0 arguments;
       1 argument is expected.

     Out[1]= Sin[]



Since most messages can be generated by several different functions,
the messages in this listing are arranged alphabetically by the
tag of the message rather than the Mathematica symbol to which the
message is attached.  In the previous example, the tag of the
Sin::argx message is "argx".  To find a message in the listing,
look for the tag of the message rather than the name of the function.

Most error messages are generated by incorrect function arguments
or incorrect option values. In such cases, the general documentation
should provide the necessary information on the correct use of the
function.

The remaining messages are warnings, explanations of syntax errors,
responses to conditions outside Mathematica, and special diagnostic
messages.

Most warning messages begin with the word "Warning" to indicate
that the situation being described, while technically valid,
frequently corresponds to incorrect input.  In general, of course,
any message could be considered a warning and can be ignored if
its origin is well understood and known to be correct.

Functions that depend on operations outside Mathematica can generate
error messages if a required external operation fails.  Many file
manipulation functions, for example,  will fail if the corresponding
functions in the operating system of your computer fail.  If there
is a problem with an external function, this problem must be solved
in order for the Mathematica function to work correctly.

Diagnostic messages are generated when Mathematica is unable to
correctly perform a requested operation.  For example, numerical
evaluation of an integral that does not converge will lead to
messages describing the algorithmic reason for the failure.  If
the underlying request is not mathematically meaningful or if the
problem cannot be solved by available algorithms, the best solution
is often to reformulate the problem.

There are a small number of diagnostic messages that should never
appear if the program and the internal algorithms are working
correctly.  These messages are identified by corresponding comments
in this listing, and if you encounter any repeatable way of generating
such a message you are encouraged to report the problem to appropriate
technical support personnel for assistance.

For further information on error conditions in Mathematica or other
questions about use of the program, please contact Wolfram Research
Technical Support.

                                 ******


* accg

    Message names:
       NDSolve::accg:
       NIntegrate::accg:
       NProduct::accg:
       NSum::accg:

    Message:
       Value of option AccuracyGoal -> val is not Automatic, Infinity, or a
          machine-size integer.


    Generated when the value of the AccuracyGoal option is not Automatic, 
    Infinity, or a machine-size integer.



* accnorm

    Message names:
       Accumulate::accnorm:

    Message:
       Argument expr should be a normal expression.


    Generated when the indicated argument in Accumulate is not a normal 
    expression. *A normal expression is an expression with a head and 
    zero or more arguments. *Note that Accumulate is an obsolete function, 
    superseded by Fold and FoldList.

 

* albedo

    Message names:
       SurfaceColor::albedo:

    Message:
       Albedo specification spec in first argument of expr is not a valid
          GrayLevel or RGBColor directive.


    Generated when the first argument to SurfaceColor is not a valid 
    GrayLevel or RGBColor directive.  *The first argument in SurfaceColor 
    specifies the albedo of the surface.

 

* aldec

    Message names:
       DeclarePackage::aldec:

    Message:
       Symbol sym in expr has already been declared.


    Generated when a symbol in DeclarePackage already exists.  *Example: 
    c`name followed by DeclarePackage["c`", "name"] --the input c`name 
    causes the symbol name to be created in context c`, so the symbol 
    already exists when DeclarePackage["c`", "name"] is evaluated.  *If 
    the symbol was created incorrectly, you can remove it using Remove
    before DeclarePackage.



* algdat

    Message names:
       AlgebraicRules::algdat:

    Message:
       expr is not a valid AlgebraicRules object obtained from MainSolve.


    Generated when an invalid AlgebraicRulesData object is used as a 
    replacement rule.  *Example: a + b /. AlgebraicRulesData[a -> b] -- 
    this input does not produce a valid AlgebraicRulesData object.  *A 
    valid AlgebraicRulesData object can normally only be generated by 
    AlgebraicRules, or by MainSolve (with MakeRules -> True), and cannot 
    be entered directly.

 

* almark

    Message names:
       Alias::almark:

    Message:
       Source string s contains context mark.


    Generated when the symbol in the first argument to Alias contains
    a context (backquote `) mark.  *Example: Alias["a`b", b] -- the first 
    argument should not contain a backquote character.  *Note that Alias 
    has been superseded in V2.0 by $PreRead.



* alspr

    Message names:
       UnAlias::alspr:

    Message:
       No previous alias found for sym.


    Generated by UnAlias[symbol] when no alias has been defined for symbol.
    *Alias[ ] gives all aliases that have been defined.  *Note that Alias 
    has been superseded in V2.0 by $PreRead.



* ambnt

    Message names:
       Graphics3D::ambnt:

    Message:
       Value of option AmbientLight -> val is not a valid GrayLevel
          or RGBColor specification.


    The value of the AmbientLight option is expected to have the form
    GrayLevel[level] or RGBColor[r, g, b], in which the arguments are 
    all real numbers.  *Example: Plot3D[x y, {x, 0, 1}, {y, 0, 1}, 
    AmbientLight -> {RGBColor[1, 0, 0], RGBColor[0, 1, 0]}] -- the 
    AmbientLight option should be a single color, rather than a list 
    of colors.

 

* angle

    Message names:
       Disk::angle:

    Message:
       Starting angle is larger than ending angle in angle specification 
	  expr.


    In the Disk graphics primitive, the third argument is expected to
    be an angle specification of the form {theta_1, theta_2}, with
    {theta_1 <= theta_2}.  *Example: Show[Graphics[Disk[{0, 0}, 1, {2, 1}]]] 
    -- in the angle specification {2, 1}, the first element is larger than 
    the second; replace {2, 1} with {1, 2}.

 

* aofil

    Message names:
       General::aofil:

    Message:
       file_1 already open as file_2.


    Generated when the indicated file has been previously opened with a
    different name.  *This message is most often caused by an attempt to 
    write to a file that is already open for writing.  Normally, only one 
    OutputStream may be open for a file.

 

* argb

    Message names:
       function::argb:

    Message:
       f called with n arguments; between n_1 and n_2 arguments are expected.


    Generated when the indicated function is called with an incorrect number 
    of arguments.

 

* argbu

    Message names:
       function::argbu:

    Message:
       f called with 1 argument; between n_1 and n_2 arguments are expected.


    Generated when the indicated function is called with an incorrect number 
    of arguments.

 

* argct

    Message names:
       function::argct:

    Message:
       f called with n arguments.


    Generated when the indicated function is called with an incorrect number 
    of arguments.
 


* argctu

    Message names:
       function::argctu:

    Message:
       f called with 1 argument.


    Generated when the indicated function is called with an incorrect number 
    of arguments.
 


* argf

    Message names:
       function::argf:

    Message:
       f called with n arguments; max or fewer arguments are expected.


    Generated  when the indicated function is called with an incorrect number 
    of arguments.


 
* argm

    Message names:
       function::argm:

    Message:
       f called with n arguments; min or more arguments are expected.


    Generated when the indicated function is called with an incorrect number 
    of arguments.

 

* argmu

    Message names:
       function::argmu:

    Message:
       f called with 1 argument; min or more arguments are expected.


    Generated when the indicated function is called with an incorrect 
    number of arguments.
 


* argr

    Message names:
       function::argr:

    Message:
       f called with 1 argument; n arguments are expected.


    Generated when the indicated function is called with an incorrect 
    number of arguments.

 

* argrx

    Message names:
       function::argrx:

    Message:
       f called with n_1 arguments; n_2 arguments are expected.


    Generated when the indicated function is called with an incorrect 
    number of arguments.

 

* argt

    Message names:
       function::argt:

    Message:
       f called with n arguments; n_1 or n_2 arguments are expected.


    Generated when the indicated function is called with an incorrect 
    number of arguments.

 

* argtu

    Message names:
       function::argtu:

    Message:
       f called with 1 argument; n_1 or n_2 arguments are expected.


    Generated when the indicated function is called with an incorrect 
    number of arguments.

 

* argx

    Message names:
       function::argx:

    Message:
       f called with n arguments; 1 argument is expected.


    Generated when the indicated function is called with an incorrect 
    number of arguments.

 

* arrsp

    Message names:
       GraphicsArray::arrsp:

    Message:
       Value of option GraphicsSpacing -> val should be a number between
          0 and 1 or a list of two such numbers.


    The value of the GraphicsSpacing option in GraphicsArray is expected 
    to be a number between 0 and 1 or a pair of numbers between 0 and 1.

 

* aspr

    Message names:
       AspectRatio::aspr:

    Message:
       Value of option AspectRatio -> val is not a finite positive number
          or Automatic.


    Generated when the value of the AspectRatio option is not a finite 
    positive number or Automatic.  *Example: Plot[Sin[x], {x, 0, 9}, 
    AspectRatio -> alpha] -- an error occurs if alpha does not evaluate to 
    a finite positive number or Automatic.



* attf

    Message names:
       Function::attf:

    Message:
       Attributes attrs in expr cannot be used as function attributes.


    Generated when the attribute argument to Function includes an attribute 
    other than Flat, Listable, Orderless, or HoldAll.  *Attributes in 
    Function can be specified using the optional third argument.  *Example: 
    Function[x, Sin[x], {Listable, Locked}] -- the Locked attribute is not 
    an allowed attribute in Function.



* attnf

    Message names:
       Attributes::attnf:

    Message:
       expr is not a known attribute.


    The attributes of a symbol must be among the list of known attributes.
    *Known attributes include Protected, ReadProtected, Locked, Temporary, 
    HoldFirst, HoldRest, HoldAll, Flat, Orderless, OneIdentity, Listable, 
    and Constant.  *Example: SetAttributes[f, List] -- there is no attribute
    called List.



* attsl

    Message names:
       Attributes::attsl:

    Message:
       expr is not a symbol, string, or list of symbols and strings.


    The argument to Attributes is expected to be a symbol, a string, or a 
    list of symbols and strings.



* axedg

    Message names:
       AxesEdge::axedg:

    Message:
       expr is not a valid axis edge specification.


    The value of the AxesEdge option is expected to be None, Automatic, 
    or a list with three elements.  *If the value is a list, each element 
    describes the axis edge in a particular direction, and should be None, 
    Automatic, {1, 1}, {1, -1}, {-1, 1}, or {-1, -1}.  *Example:
    Plot3D[x y, {x, 0, 1}, {y, 0, 1}, AxesEdge -> {None, {0, 1}, Automatic}] 
    -- the element {0, 1} in the value of the AxesEdge option does not
    have a valid form; AxesEdge -> {None, {-1, 1}, Automatic} is a valid
    AxesEdge specification.

 

* axes

    Message names:
       Axes::axes:

    Message:
       expr is not a valid axis specification.


    The value of the Axes option is expected to be True, False, or a list 
    specifying True or False for each axis.  *A list of two elements can be 
    used with two-dimensional plots, and a list of three elements can be 
    used with three-dimensional plots.  *Example: Plot[x^2 , {x, 0, 3}, 
    Axes -> {0, 1}] -- the value {0, 1} contains elements other than True 
    or False; to draw only one axis, use Axes -> {False, True}.



* base

    Message names:
       General::base:

    Message:
       Requested base b in expr should be between 2 and max.


    Generated when the base in the special form base^^digits is not in the 
    indicated range.  Example: 100110^^2 -- to enter 100110 in base 2, use 
    2^^100110.



* basf

    Message names:
       BaseForm::basf:

    Message:
       Requested base n should be between 2 and max.


    The second argument to BaseForm is expected to be an integer in the
    indicated range.  *The maximum number is determined by the number of 
    characters used to represent digits (usually 36).  *The functions 
    IntegerDigits and RealDigits may be helpful for bases outside of this 
    range.



* basic

    Message names:
       Information::basic:

    Message:
       ?Name gives information on Name, ?Ab* on all symbols starting with
          ??Name gives more information.


    Generated when three or more consecutive question mark symbols (?)
    are entered.



* bend

    Message names:
       ParametricPlot::bend:
       Plot::bend:

    Message:
       MaxBend expr is not in the range 0 to 45.


    The value of the MaxBend option is expected to be a real number between 
    0 and 45.



* bitf

    Message names:
       $BatchInput::bitf:

    Message:
       Cannot set s to expr; value must be True or False.


    Generated when the value to be assigned to $BatchInput is not True or 
    False.



* bktcm

    Message names:
       Syntax::bktcm:

    Message:
       "input" should probably be "sub"; commas are not allowed between
       parentheses.


    Generated when commas are encountered between parentheses and it appears
    that the indicated bracket should have been used instead.  *Example: 
    f(x, y] -- arguments to a function should be enclosed in square brackets 
    ([ and ]).



* bktfn

    Message names:
       Syntax::bktfn:

    Message:
       "input" should probably be "sub".


    Generated by syntax errors involving unmatched brackets ([ and ]).

 

* bktmch

    Message names:
       Syntax::bktmch:

    Message:
       "input" must be followed by "b_1", not "b_2".


    Generated by syntax errors involving unmatched brackets.  Example: 
    f[x) -- arguments to functions should be enclosed in square brackets 
    ([ and ]).



* bktwrn

    Message names:
       Syntax::bktwrn:

    Message:
       Warning: "input" should probably be "sub".


    Generated when the indicated character is probably incorrect, even
    though the input is valid.

 

* bktx

    Message names:
       Syntax::bktx:

    Message:
       "input" has extra "b" after it.


    Generated when an extra bracket is found in input.  * Example: 
    f[g[x, y], z]] -- this entry contains unmatched brackets.



* bool

    Message names:
       function::bool:

    Message:
       True or False expected at position n in expr.


    Generated when the indicated function argument is expected to be either 
    True or False.



* boxz

    Message names:
       Graphics3D::boxz:

    Message:
       Box for 3D graphics has zero size.


    Generated when the box produced to display 3D graphics has zero volume.
    *Try setting the BoxRatios option to a list of three non-zero numbers.

 

* cccx

    Message names:
       CompiledFunction::cccx:

    Message:
       Expression expr should be a machine-size complex number.


    Generated when the compiled function interpreter expects the indicated
    expression to be a machine-size complex number.  *Example: 
    Compile[x, c x, {{c, _Complex}}][1] -- the parameter c is expected to 
    be a complex number at the time the compiled function is used.



* ccf

    Message names:
       CompiledFunction::ccf:

    Message:
       Result expr of external evaluation does not have the correct form.


    Generated by failure involving evaluation of functions outsided the 
    compiler.  *Example: f/: {f[t_]} = t followed by Compile[x, f[x]][0] -- 
    expressions that match {f[t_]} are used internally by the compiler,
    and rules which alter these expressions can lead to errors.



* ccint

    Message names:
       CompiledFunction::ccint:

    Message:
       Expression expr should be a machine-size integer.


    Generated when the compiled function interpreter expects the indicated
    expression to be a machine-size integer.  *Example: Compile[x, x g[x], 
    {{g[_], _Integer}}][1] -- any expression matching the pattern g[_] 
    should evaluate to a machine-size integer at the time the CompiledFunction 
    object is used.



* ccon

    Message names:
       Compile::ccon:

    Message:
       Warning: Non-numerical object expr with attribute Constant cannot
          be compiled.


    Generated when a function to be compiled contains a symbol with
    attribute Constant that does not evaluate to a real number.  *Example: 
    SetAttributes[c, Constant] followed by Compile[x, c Sin[x]] -- 
    non-numerical constant symbols cannot be compiled.



* ccr

    Message names:
       CompiledFunction::ccr:

    Message:
       Expression expr should be a machine-size real number.


    Generated when the compiled function interpreter expects the indicated
    expression to be a machine-size real number.  *Example: 
    Compile[x, g[x]][2] -- the function g is assumed to be real by default, 
    and an error occurs if g[2] does not evaluate to a real number.



* cctf

    Message names:
       CompiledFunction::cctf:

    Message:
       Expression expr should be True or False.


    Generated when the compiled function interpreter expects the indicated
    expression to be True or False.  *Example: Compile[x, If[b, x, 1/x], 
    {{b, True|False}}][0] -- the parameter b is expected to be True or 
    False at the time the CompiledFunction object is used.



* cdir

    Message names:
       FileNames::cdir:
       ParentDirectory::cdir:
       ResetDirectory::cdir:
       SetDirectory::cdir:

    Message:
       Cannot set current directory to dir.


    Generated when a requested directory cannot be used as the current
    directory.  *Example: SetDirectory["sdata"] -- an error will occur if 
    no directory with the name sdata is found in the current directory.
    *Check that the directory name has been spelled and punctuated as 
    appropriate for your computer.



* cfail

    Message names:
       LatticeReduce::cfail:
       NullSpace::cfail:
       PseudoInverse::cfail:
       SingularValues::cfail:

    Message:
       Algorithm failed to converge.


    Generated when the algorithm used by the indicated function did not 
    converge.  *Example: LatticeReduce[{{1, 2}, {3, 6}}] -- the algorithm 
    used by LatticeReduce will not converge if the matrix is singular.

 

* cfcode

    Message names:
       CompiledFunction::cfcode:

    Message:
       Invalid opcode expr; a non-negative integer less than max is 
          expected.


    Generated when an invalid ``opcode'' is found while using a
    CompiledFunction expression.  The opcode (operation code) is the first 
    element in each compiled code instruction.  The third argument to 
    CompiledFunction normally contains a list of such instructions.  
    *Example: CompiledFunction[{_Real}, {0, 0, 1, 0}, {{1, 17}, {c, 0}}, 
    Function[{x}, x]] --the symbol c is not a valid opcode.



* cfct

    Message names:
       CompiledFunction::cfct:

    Message:
       Number of arguments n_1 does not match the length n_2 of the
          argument template.


    Generated when a CompiledFunction expression is used with an incorrect
    number of arguments.  *Example: Compile[{x, y}, x + y][1] -- the 
    argument template {x, y} has two elements, but the CompiledFunction 
    object is used here with only one argument.



* cfcx

    Message names:
       CompiledFunction::cfcx:

    Message:
       Argument expr at position n should be a machine-size complex number.


    Generated when the indicated argument to a CompiledFunction
    object is not a machine-size complex number.  *Example: 
    Compile[{{z, _Complex}}, 1/(1 + z)][True] -- the argument
    True is expected to match the type specification _Complex.



* cfex

    Message names:
       CompiledFunction::cfex:

    Message:
       External evaluation error at instruction n; proceeding with
          uncompiled evaluation.


    Generated by failure of compiler operations involving evaluation 
    of functions outside the compiler.  *This message is sometimes turned 
    off by default.  It can be activated using On[CompiledFunction::cfex].



*cfff

    Message names:
       CompiledFunction::cfff:

    Message:
       Fourth argument expr should be of the form Function[{args}, expr].


    Generated when the fourth argument in CompiledFunction does not have 
    the indicated form.  *The fourth argument to CompiledFunction is a pure 
    function constructed from the original expression.



* cffv

    Message names:
       CompiledFunction::cffv:

    Message:
       First operation op does not check for correct version number.


    Generated when the first instruction in a CompiledFunction object
    does not check the Mathematica version number.



* cfins

    Message names:
       CompiledFunction::cfins:

    Message:
       Arguments in instruction number n do not have the correct form.


    Generated when the arguments to the indicated instruction in a
    CompiledFunction object do not have the correct form for the
    corresponding function.  *The third argument in a CompiledFunction 
    object is normally a list of instructions, each consisting of an 
    instruction number and a set of arguments.  *This message is most 
    commonly caused by use of an invalid CompiledFunction object.



* cfint

    Message names:
       CompiledFunction::cfint:

    Message:
       Argument expr at position n should be a machine-size integer.


    Generated when the indicated argument to a CompiledFunction object is 
    not a machine-size integer.  *Example: Compile[{{n, _Integer}}, n^n][Pi] 
    -- the argument Pi is expected to match the type specification _Integer.



* cfn

    Message names:
       CompiledFunction::cfn:

    Message:
       Numerical error encountered at instruction n; proceeding with
          uncompiled evaluation.


    Generated when errors such as numerical overflow or parameters out of
    range are encountered during evaluation of a CompiledFunction expression.
    *Example: f = Compile[{x}, Sqrt[x]] followed by f[-3] -- the compiler 
    does not handle square roots of negative numbers and uses uncompiled 
    evaluation to evaluate f[-3].



* cfnv

    Message names:
       CompiledFunction::cfnv:

    Message:
       CompiledFunction object is invalid and cannot be used.


    Generated by use of an invalid CompiledFunction object.  *In the absence 
    of special warning messages, the result returned by Compile is normally 
    a valid CompiledFunction object.  *Additional diagnostic messages 
    typically appear along with this message.



* cfr

    Message names:
       CompiledFunction::cfr:

    Message:
       Argument expr at position n should be a machine-size real number.


    Generated when the indicated argument to a CompiledFunction object is 
    not a machine-size real number.  *The default argument type is Real.
    *Example: f = Compile[x, Sin[x]] followed by f[a] -- the argument
    to the CompiledFunction object assigned to f is expected to be a real 
    number.



* cftf

    Message names:
       CompiledFunction::cftf:

    Message:
       Argument expr at position n should be True or False.


    Generated when the indicated argument to a CompiledFunction object is 
    not True or False.  *Example: f = Compile[{{x, True|False}}, 
    If[x, on, off]] followed by f[1] -- the parameter specification 
    {x, True|False} indicates that the argument will be True or False.



* cfver

    Message names:
       CompiledFunction::cfver:

    Message:
       Incorrect version number; CompiledFunction object cannot be used.


    Generated when a CompiledFunction object is used with an incorrect
    version of Mathematica.  *The first instruction in a valid 
    CompiledFunction object checks the version number.



* child

    Message names:
       CallProcess::child:

    Message:
       Child process gave error: message.


    Generated when an external child process resulting from CallProcess 
    produces an error message.



* clip

    Message names:
       SurfaceGraphics::clip:

    Message:
       Value of option ClipFill -> expr is not None, Automatic, a color,
          or a list of two such values.


    The value of the ClipFill option is expected to be None, Automatic, 
    a valid color specification, or a pair of such expressions, as in 
    ClipFill -> {None, RGBColor[1,0,0]}.



* clloc

    Message names:
       ClearAll::clloc:

    Message:
       Cannot clear local variable var.


    Generated when ClearAll is used with local variables, such as variables 
    in a Block.  *Example: Block[{x}, x = 1; ClearAll[x]] -- the symbol x
    cannot be cleared within the Block.



* cmeq

    Message names:
       ConstrainedMax::cmeq:
       ConstrainedMin::cmeq:

    Message:
       expr is not a valid equation or inequality.


    Generated when the indicated expression from the second argument to
    ConstrainedMin or ConstrainedMax is not an equation or an inequality.
    *Example: ConstrainedMax[x + y, {x < 5, y === 1}, {x, y}] -- the 
    expression y === 1 evaluates to False, which is not an equation; the
    constraint can be entered as y == 1.

 

* cmeqx

    Message names:
       ConstrainedMax::cmeqx:
       ConstrainedMin::cmeqx:

    Message:
       expr does not contain any valid equations or inequalities.


    The second argument to ConstrainedMin or ConstrainedMax is required to 
    include at least one valid equation or inequality.  *Example: 
    ConstrainedMax[x, {y < 1}, x] -- the constraint y < 1 does not depend 
    on the variable x and is discarded.  *Example: ConstrainedMax[x, x > 0, x] 
    -- since the algorithm requires all variables to be positive, the implied 
    constraint x > 0 is discarded, leaving no constraints.



* cmfc

    Message names:
       ConstrainedMax::cmfc:
       ConstrainedMin::cmfc:

    Message:
       Constant term c in f is not a real number.


    Generated when the constant term in the indicated function is not a 
    real number.  *The first argument in ConstrainedMax or ConstrainedMin
    is expected to be a linear function with real coefficients.  *Example: 
    ConstrainedMax[I + x, {x < 5}, x] -- the constant term in I + x is not 
    a real number.



* cmfr

    Message names:
       ConstrainedMax::cmfr:
       ConstrainedMin::cmfr:

    Message:
       Coefficient c of variable var in f is not a real number.


    Generated when the indicated coefficient in the objective function
    is not a real number.  *The first argument in ConstrainedMax or 
    ConstrainedMin is expected to be a linear function with real coefficients.
    *Example: ConstrainedMax[1 + c x, {x < 1}, x] -- the coefficient of x 
    in 1 + c x should be a real number.



* cmfun

    Message names:
       ConstrainedMax::cmfun:
       ConstrainedMin::cmfun:

    Message:
       f is not a linear function of vars with real coefficients.


    Generated when the first argument to ConstrainedMin or ConstrainedMax is 
    not a linear function, or when the coefficients are not real numbers. 
    *Example: ConstrainedMax[x^2  1, {x < 1}, x] -- the first argument is 
    not a linear function in the variable x.



* cmlc

    Message names:
       ConstrainedMax::cmlc:
       ConstrainedMin::cmlc:

    Message:
       f is not a linear constraint in the variables vars.


    Generated when the constraint equations in ConstrainedMin or 
    ConstrainedMax are not linear in the variables.  *Example: 
    ConstrainedMax[x + y, {x y < 1}, {x, y}] -- the constraint equation 
    x y < 1 is not linear in the variables x and y.



* cmnc

    Message names:
       ConstrainedMax::cmnc:
       ConstrainedMin::cmnc:

    Message:
       Non-numerical constraint encountered.


    Generated when a constraint equation contains non-numerical coefficients.
    *The constraint equations are given in the second argument to 
    ConstrainedMin and ConstrainedMax.  *Example: ConstrainedMin[x, {c x < 1}, 
    x] -- the coefficient c in the constraint equation is expected to evaluate 
    to a real number.



* cmtol

    Message names:
       ConstrainedMax::cmtol:
       ConstrainedMin::cmtol:

    Message:
       Value of option Tolerance -> val is not a positive real number or
       Automatic.


    The value of the Tolerance option in ConstrainedMin and ConstrainedMax 
    is expected to be a positive real number or Automatic.

 

* codespace

    Message names:
       General::codespace:

    Message:
       Code space corrupted.


    Generated by outside changes to the executable code, or by various
    internal errors.



* colmh

    Message names:
       ColumnForm::colmh:

    Message:
       Horizontal alignment specification expr is not Left, Center, or Right.


    Generated when the second argument to ColumnForm is not Left, Center, or 
    Right.



* colmv

    Message names:
       ColumnForm::colmv:

    Message:
       Vertical alignment specification expr is not Below, Center, or Above.


    The third argument to ColumnForm is expected to be Below, Center, or 
    Above.




* color

    Message names:
       function::color:

    Message:
       expr is not a valid color or gray-level specification.


    A valid color or gray-level specification is an expression of the
    form GrayLevel[lev], RGBColor[r,g,b], Hue[h], Hue[h, s, b], or 
    CMYKColor[c, m, y, k], in which the arguments are all positive numbers.
    *Example: Show[Graphics3D[{GrayLevel[{.5}], Point[{1, 2, 3}]}]] -- 
    the argument to GrayLevel is expected to be a number between 0 and 1,
    rather than a list.  *Example: Plot[Sin[x], {x, 0, 10}, Background -> 
    Gray[0]] -- the expression Gray[0] is not a known color directive; 
    GrayLevel[0] specifies a gray-level.
 


* colpc

    Message names:
       ColorOutput::colpc:
       ToColor::colpc:

    Message:
       Result expr obtained during color conversion by applying function f 
       to color col is not a GrayLevel, RGBColor, or CMYKColor color 
       directive.  
       
    Generated when color conversion using the indicated function produces 
    a result which is not a color.  *The result of applying the ColorOutput 
    option should be a GrayLevel, RGBColor, or CMYKColor color directive.
    *Example: Plot[Sin[x], {x, 0, 9}, ColorOutput -> f] -- the value f of 
    the ColorOutput option should be a function that returns a valid color 
    directive.



* colpn

    Message names:
       ColorOutput::colpn:
       ToColor::colpn:

    Message:
       Result expr obtained during color conversion by applying function f 
       to color col contains a non-numerical argument.


    Generated when color conversion using the indicated function results
    in a color directive with non-numerical arguments.  *Example: 
    Plot[x, {x, 0, 1}, ColorOutput -> (GrayLevel[x] &)] -- the value 
    GrayLevel[x] & returns a GrayLevel directive with argument x, which is 
    a symbol rather than a number.
 


* colpw

    Message names:
       ColorOutput::colpw:
       ToColor::colpw:

    Message:
       Result expr obtained during color conversion by applying function f
       to color col has the wrong number of arguments for that color.  
       
    Generated when color conversion using the indicated function produces
    a color directive with an incorrect number of arguments.  *Example: 
    Show[graphics, ColorOutput -> (RGBColor[#[[1]]]&)] in which graphics 
    contains a color directive (such as GrayLevel[level]) that does not have 
    three arguments; the RGBColor graphics directive requires three arguments.

 

* comma

    Message names:
       Syntax::comma:

    Message:
       Invalid input "input"; commas are not allowed between parentheses.


    Generated by syntax errors involving commas.  *Example: f(x, y) -- 
    arguments to a function should be enclosed in square brackets ([ and ]).

 

* condp

    Message names:
       Condition::condp:

    Message:
       Warning: Pattern p appears on right-hand side of condition cond.


    Generated when a pattern expression is used incorrectly within Condition.
 


* cpdd

    Message names:
       CallProcess::cpdd:

    Message:
       Process name has died.


    Generated when an external process requested by CallProcess has died.



* cph

    Message names:
       Compile::cph:

    Message:
       Expression expr with head h cannot be compiled.


    Generated when a function to be compiled contains a subexpression that
    cannot be compiled.  *Non-compilable expressions can be recognized by 
    their heads.  *Example: Compile[x, {a, b}] -- the list {a, b} cannot be 
    compiled.



* cpnac

    Message names:
       CallProcess::cpnac:

    Message:
       Process name is not active.


    Generated when an external process requested by CallProcess is not 
    active.



* cpst

    Message names:
       CallProcess::cpst:

    Message:
       Cannot start process name.


    Generated when CallProcess is unable to start a required external 
    process.



* cpw

    Message names:
       Compile::cpw:

    Message:
       Warning: Cannot compile raw expression expr of type t.


    Generated when a function to be compiled contains a non-numerical raw
    expression as an argument.  *Example: Compile[x, "b" x] -- the string 
    "b" is a non-numerical raw expression and cannot be compiled.  *Although 
    the function containing the non-compilable argument is not compiled, 
    compilation continues with any remaining functions.



* crcx

    Message names:
       CompiledFunction::crcx:

    Message:
       Compiled expression expr should be a machine-size complex number.


    Generated when the compiled function interpreter expects the indicated
    expression to be a machine-size complex number.



* crint

    Message names:
       CompiledFunction::crint:

    Message:
       Compiled expression expr should be a machine-size integer.


    Generated when the compiled function interpreter expects the indicated 
    expression to be a machine-size integer.



* crr

    Message names:
       CompiledFunction::crr:

    Message:
       Compiled expression expr should be a machine-size real number.


    Generated when the compiled function interpreter expects the indicated
    expression to be a machine-size real number.



* crtf

    Message names:
       CompiledFunction::crtf:

    Message:
       Compiled expression expr should be True or False.


    Generated when the compiled function interpreter expects the indicated
    expression to be True or False.



* csa

    Message names:
       SeriesData::csa:

    Message:
       Argument e in expr is not a power series.


    Generated when at least one of the arguments to ComposeSeries is not 
    a series (expression with head SeriesData).



* cset

    Message names:
       Compile::cset:

    Message:
       Warning: Variable var of type t_1 encountered in assignment 
          of type t_2.


    Generated by type conflicts involving local variables.  *Example: 
    Compile[{{x, _Real}}, Block[{z = True}, z = x]] -- the local variable 
    z is assumed to be of type True|False after the first assignment, and 
    the assignment z = x results in a type conflict.



* csym

    Message names:
       DSolve::csym:

    Message:
       Value of option DSolveConstants -> val must be a symbol.


    The value of the DSolveConstants option in DSolve is expected
    to be a symbol.  *Example: DSolve[eq, f, x, DSolveConstants -> {A, B}] 
    -- the expression {A, B} is a list rather than a symbol; a single symbol 
    is expected.



* ctlev

    Message names:
       Contours::ctlev:

    Message:
       Contour level val is not a real number.


    Generated when the value of the Contours option is a list containing
    non-numerical values.  *The value of the Contours option can be either 
    an integer giving the number of contours, or a list of real numbers 
    specifying individual contour levels.



* ctnl

    Message names:
       Contours::ctnl:

    Message:
       Value of option Contours -> val is not an integer or a list of 
       numbers.


    Generated when the value of the Contours option is neither an integer 
    specifying the number of contours nor a list of individual contour 
    levels.



* ctstl

    Message names:
       ContourStyle::ctstl:

    Message:
       expr is not a valid contour style specification.


    Generated when the value of the ContourStyle option contains
    values which are not valid line-style specifications.  *The graphics 
    directives GrayLevel, RGCColor, Hue, CMYKColor, Thickness, 
    AbsoluteThickness, Dashing, and AbsoluteDashing can be used to specify
    line-styles.  The value of the ContourStyle option may involve nested 
    lists of graphics directives or Automatic.



* ctyp

    Message names:
       Compile::ctyp:

    Message:
       Invalid type specification t in var.


    Generated when an invalid type specification is used to describe a
    parameter of a function to be compiled.  *A valid parameter specification 
    is a pair {var, type}, where type can be _Real, _Integer, _Complex, or 
    True|False, and var is the name of the corresponding parameter.  *Example: 
    Compile[{{x, Real}}, x Sin[x]] -- the first argument in Compile is 
    expected to be a list of valid variable specifications, as in 
    Compile[{{x, _Real}}, x Sin[x]].



* ctyps

    Message names:
       Compile::ctyps:

    Message:
       Invalid subexpression type specification t.


    Generated when the third argument in Compile contains an invalid
    specification for the type of a subexpression.  The third argument 
    in Compile should be a list of the form {{p_1, pt_1}, ... } which 
    specifies that subexpressions which match p_i are of type pt_i.  *Valid 
    type specifications include _Real, _Complex, _Integer, and True|False.
    *Example: Compile[{x}, Sin[n x], {n, _Real}] -- each element from the 
    third argument should be a list, as in Compile[{x}, Sin[n x], 
    {{n, _Real}}].



* cvnwt

    Message names:
       FindRoot::cvnwt:

    Message:
       Newton's method failed to converge to the prescribed accuracy
          after n iterations.


    Generated when the indicated iteration limit is reached before the 
    algorithm converges to a root of the function.  *Example: 
    FindRoot[x^2 + x + 1, {x, 0}] -- the function x^2 + x + 1 does not 
    have a root along the real axis.



* cxdup

    Message names:
       Context::cxdup:

    Message:
       Cannot set context_1 to context_2, since a symbol already exists 
          with name sym and context context_2.


    Generated by context assignment when a symbol with the new context 
    already exists. *Example: context1`var followed by Context[context2`var] = 
    "context1`" -- the context of context2`var cannot be changed to context1` 
    since the first entry has already created a symbol var in that context.



* cxfil

    Message names:
       ContextToFilename::cxfil:

    Message:
       ContextToFilename[e_1] evaluated to e_2; a String is expected;
       using name.


    Generated when non-standard rules attached to ContextToFilename
    produce a result which is not a string.  Various functions (such as 
    Needs) depend on the result of ContextToFilename being a string.



* cxlist

    Message names:
       $ContextPath::cxlist:

    Message:
       Cannot set $ContextPath to expr; value must be a list of strings
          ending in `.


    Generated when the value to be assigned to $ContextPath is not a list 
    of strings ending in a backquote (`) character.  *Context names should 
    be strings of alphanumeric characters starting with a letter and ending 
    in a backquote.



* cxls

    Message names:
       function::cxls:

    Message:
       Context or non-empty list of contexts expected at position n in 
          expr.


    Generated when the indicated function argument is not a valid context
    or list of valid contexts.  *Example: BeginPackage["p`", "c1", "c2"] -- 
    contexts should be specified as strings ending in a backquote (`) 
    character, as in BeginPackage["p`", "c1`", "c2`"].



* cxname

    Message names:
       Context::cxname:

    Message:
       expr is not a parsable context name ending in `.


    Generated when a incorrectly formed context name is used in a string
    representing a context.  *Example: GetContext["package"] -- the context 
    name should end in a backquote (`) character, as in GetContext["package`"].
    *Example: ContextToFilename["*`"] -- special characters such as * may not 
    be used in context names.



* cxset

    Message names:
       Context::cxset:
       $Context::cxset:

    Message:
       Cannot set expr to val; value is not a parsable context name
       ending in `.

       
    Generated by context assignment when the context name is incorrectly 
    formed.  *Context names should be strings of alphanumeric characters, 
    starting with a letter and ending in a backquote (`) character.  *Example: 
    $Context = newcontext -- the name of the context should be a string 
    (enclosed in double quotes), as in $Context = "newcontext`".  Example: 
    Context[a] = "54x`" -- the first character in the context name cannot be 
    a number.



* cxt

    Message names:
       function::cxt:

    Message:
       Context (string ending in `) expected at position n in expr.


    Generated when the indicated expression is not a valid context 
    specification.  *Example: BeginPackage[pkg] -- the first argument in 
    BeginPackage is expected to be a string ending in a backquote (`) 
    character.



* cxun

    Message names:
       Unset::cxun:

    Message:
       Cannot unset contexts.


    Generated when Unset is used with the context of a symbol.  *Example:  
    Context[x] =. -- the context of a symbol can be changed but cannot be 
    unset.
 


* datedpasswd

    Message names:
       General::datedpasswd:

    Message:
       Dated password a: b: c.


    Generated when a dated password is found in your password file.



* dbug

    Message names:
       Debug::dbug:

    Message:
       To inspect an expression, just evaluate it normally.


    Generated by miscommunication between the kernel and the front end of 
    Mathematica while evaluating Debug.



* dbyz

    Message names:
       General::dbyz:

    Message:
       Division by zero.


    Generated by operations involving division by zero.  *Example: 
    Divide[5, 0] -- the second argument in Divide is the denominator of a 
    fraction.



* deql

    Message names:
       DSolve::deql:
       NDSolve::deql:

    Message:
       expr is not a valid equation or list of valid equations.


    Generated if the first argument to DSolve or NDSolve is not a list of 
    valid equations.  *Equations are typically entered in the form lhs == 
    rhs.  *Systems of equations can be entered as a list of equations.
    *Example: DSolve[f'[t] = k f[t], f[t], t] -- the first argument is an 
    assignment (using =) rather than an equation (using ==); the 
    corresponding equation can be entered as f'[t] == k f[t].



* deqn

    Message names:
       DSolve::deqn:
       NDSolve::deqn:

    Message:
       Element e_n in the equation list is not an equation.


    Generated if the first argument to DSolve or NDSolve is not an equation 
    or a list of equations.  *Equations are typically entered in the form 
    lhs == rhs.  *Example: DSolve[{f'[x] + f[x]}, f[x], x] -- the first 
    argument is a list containing a sum rather than an equation; a list of 
    equations is expected, as in DSolve[{f'[x] + f[x] == 0}, f[x], x].



* deqx

    Message names:
       DSolve::deqx:
       NDSolve::deqx:

    Message:
       Supplied equations are not differential equations of the given
          functions.


    Generated when the differential equations in the first argument to DSolve 
    or NDSolve are not expressed in terms of the functions listed in the 
    second argument.  *The second argument in NDSolve is a function or list 
    of functions.  The differential equations in the first argument should 
    be expressed in terms of these functions.



* dfont

    Message names:
       DefaultFont::dfont:

    Message:
       Value of option DefaultFont -> val cannot be used as a font; using 
       global $DefaultFont instead.


    Generated when the value of the DefaultFont option is not a string, 
    a number, or a pair {"name", size}, indicating the name and size of a 
    font.



* dgbgn

    Message names:
       Interrupt::dgbgn:
       TraceDialog::dgbgn:

    Message:
       Entering Dialog; use Return[ ] to exit.
       
    Informational message generated when Dialog is entered from the 
    interrupt menu.



* dgend

    Message names:
       Interrupt::dgend:
       TraceDialog::dgend:

    Message:
       Exiting Dialog.


    Informational message generated when exiting a Dialog session
    which was entered from the interrupt menu.



* digit

    Message names:
       General::digit:

    Message:
       Digit at position n in d is too large to be used in base b.


    Generated when the special input form base^^digits is used with an 
    invalid digit.  *Example: 3^^5 -- the digit 5 is not allowed in base 3;
    the input 5^^3 represents 3 in base 5.



* dinv

    Message names:
       Solve::dinv:

    Message:
       The expression expr involves unknowns in more than one argument, 
          so inverse functions can't be used.


    Inverse functions can only be used by Solve when the inverse involves a 
    single variable.  *Example: Solve[f[x, x + 1] == 1, x] -- both of the 
    arguments in f[x, x + 1] depend on the variable x.



* dirdep

    Message names:
       function::dirdep:

    Message:
       Cannot get deeper in directory tree: dir.


    Generated when the directory depth exceeds the maximum number of open
    files allowed by the operating system on your computer.  *This error can 
    occur, for example, on Unix systems when there are circular links.



* divz

    Message names:
       Mod::divz:
       Quotient::divz:

    Message:
       Second argument in expr should be non-zero.


    Generated when the second argument in Mod or Quotient is zero.
    *Example: Mod[5, 0] -- the modulus should be non-zero.



* dmval

    Message names:
       InterpolatingFunction::dmval:

    Message:
       Input value lies outside domain of the interpolating function.


    Generated when an InterpolatingFunction expression is applied to a 
    value outside the domain of interpolation.  For example, if f = 
    InterpolatingFunction[{1, 7}, <>], then f[8] will lead to this message, 
    since the function requires a value in the range {1, 7}.



* dmwarn

    Message names:
       InterpolatingFunction::dmwarn:

    Message:
       Warning: Input value lies outside domain of the interpolating
            function.


    Warning message generated when an InterpolatingFunction is used outside 
    the range of interpolation, but when the problem is most likely a 
    consequence of numerical roundoff.



* dnim

    Message names:
       DSolve::dnim:

    Message:
       Built-in procedures cannot solve this differential equation.


    Generated when the built-in differential equation solver cannot solve 
    the specified equation or equations.



* dotsh

    Message names:
       Dot::dotsh:

    Message:
       Tensors a and b have incompatible shapes.


    Generated when arguments to Dot have incompatible shapes.  *Example: 
    Dot[{a, b, c}, {x, y}] or {a, b, c} . {x, y} --the arguments to Dot 
    should have the same length.  *If the arguments are matrices or tensors, 
    the length of the innermost dimension of each argument should match the 
    length of the outermost dimension of the next argument.

 

* dpa

    Message names:
       Dialog::dpa:

    Message:
       Abort while evaluating DialogProlog expr caught in dialog.


    Generated when an abort signal is received while evaluating the 
    DialogProlog option in Dialog.



* dpbin

    Message names:
       Dump::dpbin:

    Message:
       Invalid binary file name.


    Generated when the indicated binary file does not have a valid form.

 

* dpcr

    Message names:
       Dump::dpcr:

    Message:
       Cannot create binary file name.


    Generated when Mathematica cannot create the file specified in the
    first argument of Dump.  *This error can occur if you do not have 
    permission to create the indicated file, or if the file system is full.

 

* dpdat

    Message names:
       Dump::dpdat:

    Message:
       Invalid data file name.


    Generated when the dumped data file to be read during intialization is 
    not valid.



* dpfil

    Message names:
       Dump::dpfil:

    Message:
       expr does not contain an appropriate binary filename.


    The binary filename used by Dump is expected to be specified as
    a string ("filename" or equivalent).  *The name of the binary file 
    is taken from the third argument to Dump, or from $CommandLine[[1]] 
    if no third argument is given.  *Example: Dump["mymath", startup, oldmath] 
    contains the binary filename oldmath, which is not a string --the name 
    must be enclosed in double quotes, as in "oldmath".



* dpmem

    Message names:
       Dump::dpmem:

    Message:
       Not enough memory space to read data file.


    Generated when there is insufficient memory available to read the
    required data file.

 

* dpop

    Message names:
       Dump::dpop:

    Message:
       Cannot open binary file name.


    Generated when Dump cannot open the indicated file.  *This error can 
    appear if the indicated file does not exist, if you do not have 
    permission to open the file, or as a result of various internal errors.

 

* dprd

    Message names:
       Dump::dprd:

    Message:
       Cannot read from binary file name.


    Generated when Dump is unable to read from the binary file specified
    in the third argument to Dump (or $CommandLine[[1]] if no third argument 
    is given).  *This message can appear if you do not have permission to 
    read from the indicated file, or as a result of various internal errors.
 


* dpsect

    Message names:
       Dump::dpsect:

    Message:
       Invalid section head in file.


    Generated when the indicated entry in the file used by Dump cannot be 
    used.



* dpwrt

    Message names:
       Dump::dpwrt:

    Message:
       Cannot write to binary file name.


    Generated when Dump is unable to write data to the indicated file. 
    *This error can appear if the file system is full, the file protection 
    has changed since the file was created, or some other internal error 
    has occurred.



* drop

    Message names:
       Drop::drop:
       StringDrop::drop:

    Message:
       Cannot drop positions n_1 through n_2 in expr.


    Generated when second argument to Drop or StringDrop specifies positions 
    that are not available in the indicated expression.  *Example: 
    Drop[{1, 2, 3}, {4}] -- position {4} does not exist in the expression 
    {1, 2, 3} with length 3.  *Example: StringDrop["aaa", -4] -- there are 
    no characters four elements from the end of the string "aaa".



* dsdeg

    Message names:
       DSolve::dsdeg:

    Message:
       Warning: Differential equation of order higher than four encountered.  
          DSolve may not be able to find the solution.

    Generated when the arguments to DSolve correspond to a differential
    equation with degree higher than four.  *The solutions to differential 
    equations with degree higher than four cannot typically be represented 
    in terms of elementary numbers.



* dsdet

    Message names:
       DSolve::dsdet:

    Message:
       The system of differential equations appears to be overdetermined.


    Generated when the first argument to DSolve appears to represent an 
    overdetermined set of differential equations.  *Example: 
    DSolve[{f'[t] == f[t], f'[t] == 1}, f[t], t] -- the pair of equations 
    f'[t] == f[t] and f'[t] == 1 have no common solution.



* dsfun

    Message names:
      DSolve::dsfun:
      NDSolve::dsfun:

    Message:
      expr cannot be used as a function.


    Generated when the second argument to DSolve or NDSolve cannot be used 
    as a function.  *A valid function specification is any expression that 
    does not evaluate to a number, a list, or the variable of the equations.



* dshn

    Message names:
       AbsoluteDashing::dshn:
       Dashing::dshn:

    Message:
       Argument in expr is not a list of numbers.


    Generated when the argument to Dashing or AbsoluteDashing is not a list 
    of numbers.  *Example: grid = {{.5, {Dashing[.1]}}} and face = {0, 0, 1} 
    followed by Plot3D[x y, {x, 0, 1}, {y, 0, 1}, FaceGrids -> 
    {{face, {{}, grid}}}] --the argument to Dashing should be a list of 
    numbers, as in Dashing[{.1, .1}].



* dsvar

    Message names:
       DSolve::dsvar:
       NDSolve::dsvar:

    Message:
       expr cannot be used as a variable.


    Generated when the third argument to DSolve, or the parameter in the 
    third argument to NDSolve, cannot be used as a variable.  *The variable 
    used in DSolve or NDSolve should be a symbol or a simple non-numerical 
    expression.  *Example: x = 10 followed by DSolve[f'[x] == f[x], f[x], x] 
    -- the symbol x evaluates to the number 10, and cannot be used as a 
    variable; the value of x can be cleared using Clear[x], or a different 
    symbol name can be used.  *Example: DSolve[f'[a x] == f[a x], f[a x], 
    a x] -- the product a x cannot be used as a variable; a single symbol 
    is needed.



* dtop

    Message names:
       ResetDirectory::dtop:

    Message:
       Directory stack is empty.


    Generated by ResetDirectory when the directory stack is empty. 
    *Typically, SetDirectory is used to move to another directory, putting 
    the current directory on the directory stack, and ResetDirectory is 
    used to return to the most recent directory.  *An error occurs if 
    ResetDirectory is used without a corresponding SetDirectory.



* dup

    Message names:
       Block::dup:
       Dialog::dup:
       Module::dup:
       With::dup:

    Message:
       Duplicate local variable var found in local variable specification 
          list.


    Generated when the local variables in Block, Dialog, Module, or With 
    do not have distinct names.  *Example: Module[{x = 1, y = 2, x = 3}, 
    x + y + z] -- the symbol x appears twice in the list of local variables.



* dups

    Message names:
       Module::dups:
       With::dups:

    Message:
       Conflicting local variables var_1 and var_2 found in local variable
          specification vars.


    Generated when the names used for local variables in Module or With
    can conflict with newly generated names.  *Example: Module[{a, a$}, expr] 
    -- the Module function generates names of the form sym$n that may 
    conflict with a name such as a$.



* dvar

    Message names:
       D::dvar:

    Message:
       Multiple derivative in vars does not have the form {x, n}.


    Generated whenever a multiple derivative (list) argument to D has length 
    other than two.  Derivative specifications (second and subsequent 
    arguments to D) are expected to be non-lists (single derivatives) or 
    lists of length 2 (multiple derivatives).  *Example: D[f, {x, y, z}] -- 
    to differentiate f with respect to x, y, and z, use D[f, x, y, z].



* edsym

    Message names:
       EditDef::edsym:

    Message:
       expr is not a symbol.


    Generated when an argument to EditDef is not a symbol.



* egcd

    Message names:
       ExtendedGCD::egcd:

    Message:
       Both arguments in expr should be integers.


    Generated when either of the two arguments in ExtendedGCD is not
    an integer.



* egcdz

    Message names:
       ExtendedGCD::egcdz:

    Message:
       ExtendedGCD[0,0] has no unique solution.


    Generated when the arguments to ExtendedGCD are both zero.



* eival

    Message names:
       function::eival:

    Message:
       Unable to find all roots of the characteristic polynomial.


    Generated when the matrix eigenvalue algorithm could not solve for
    all of the requested eigenvalues.  *Example: 
    Eigenvalues[Table[Random[Integer, 9], {5}, {5}]] -- solving for the 
    roots of the characteristic polynomial of a matrix larger than 4 X 4  
    cannot generally be done without specialized algorithms.



* eivec

    Message names:
       function::eivec:

    Message:
       Unable to find eigenvector for eigenvalue expr.


    Generated when the eigenvector corresponding to the indicated 
    eigenvalue could not be computed.  *This message can appear only for 
    symbolic or exact matrices.  *The current internal algorithm for 
    symbolic eigenvectors evaluates the null space corresponding to each 
    eigenvalue.  There is always at least one eigenvector for each 
    eigenvalue.  The algorithm can only fail under unusual conditions, 
    such as failure to recognize that a particular combination of symbols o
    is equal to zero.



* eivn

    Message names:
       function::eivn:

    Message:
       Incorrect number n of eigenvectors for eigenvalue expr with
	  multiplicity m.


    Generated when the number of eigenvectors found for the indicated
    eigenvalue is zero or exceeds the multiplicity of the eigenvalue.  
    *See eivec.



* elist

    Message names:
       LogicalExpand::elist:
       MainSolve::elist:
       Roots::elist:
       ToRules::elist:

    Message:
       List encountered during logical expansion of expr.


    Generated when the internal LogicalExpand function encounters a list 
    rather a combination of equations and logical functions.  *Example: 
    ToRules[{a == 5, b == 9}] -- the equations should be entered using 
    And rather than List, as in ToRules[a == 5  b == 9].

 

* elld

    Message names:
       EllipticLog::elld:

    Message:
       The arguments to expr are inconsistent with the defining equation
          y^2 == x^3 + a x^2 + b x.


    Generated when the arguments x, y, a, and b in EllipticLog[{x, y}, {a, b}] 
    do not satisfy the equation y^2 == x^3 + a x^2 + b x.



* ellnp

   Message names:
      EllipticExp::ellnp:
      EllipticLog::ellnp:

   Message:
      The argument expr is not an ordered pair; a list of length 2 is 
         expected.


   Generated when the indicated argument in EllipticExp or EllipticLog is 
   not a list with two elements.  *Example: EllipticExp[a, b] -- the second 
   argument in EllipticExp should be a list with exactly two elements.



* emcon

    Message names:
       NProduct::emcon:
       NSum::emcon:

    Message:
       Euler-Maclaurin sum failed to converge to requested error tolerance.


    Generated when the Euler-Maclaurin method used by NProduct and NSum fails 
    to converge.  *The Euler-Maclaurin algorithm is selected using the option
    Method -> Integrate.



* enkey

    Message names:
       Get::enkey:

    Message:
       Cannot decode encoded file; incorrect key or machine.


    Generated when the password needed to read an encoded file is missing or 
    incorrect, or can only be used on a particular computer.  *Encoded files 
    are normally created with the Encode function.



* eqf

    Message names:
       LogicalExpand::eqf:
       MainSolve::eqf:
       Roots::eqf:
       Solve::eqf:
       ToRules::eqf:

    Message:
       expr is not a well-formed equation.


    Generated when the indicated expression is expected to be a well-formed
    equation.  *Example: Solve[x == {a, b}, a] -- the equation x == {a, b} 
    is not a well-formed equation, since only the right-hand side is a list.



* eqn

    Message names:
       Roots::eqn:

    Message:
       expr is not an equation.


    Generated when the indicated expression is not an equation.



* erep

    Message names:
       Replace::erep:

    Message:
       expr must be evaluated before use.


    Generated when the argument in Replace has not been evaluated.



* esntx

    Message names:
       ToExpression::esntx:

    Message:
       Could not parse string as Mathematica input.


    Generated when the argument of ToExpression is not a valid Mathematica 
    expression, or contains a Mathematica syntax error.



* esss

    Message names:
       Series::esss:

    Message:
       Essential singularity encountered in expr.


    Generated when the expansion point of a series is determined to be an 
    essential singularity of the function.  *Example: Series[Sin[1/x], 
    {x, 0, 3}] -- the point x = 0 is an essential singularity of Sin[1/x].

 

* estep

    Message names:
       function::estep:

    Message:
       Value of option ExponentStep -> val is not a positive integer.


    Generated when the value of the ExponentStep option is not a positive 
    integer or infinity.



* etype

    Message names:
       EllipticTheta::etype:
       EllipticThetaPrime::etype:

    Message:
       The first argument expr is expected to be 1, 2, 3, or 4.


    Generated when the first argument (type specification) in EllipticTheta 
    is a number other than 1, 2, 3, or 4.  *Example: 
    EllipticTheta[6.1, 5.5, 3] -- perhaps the arguments were entered out 
    of order; try EllipticTheta[3, 6.1, 5.5].



* ewt

    Message names:
       NDSolve::ewt:

    Message:
       Weighted error tolerance becomes zero during computation at x = val.


    Generated when the allowed error for a step at the indicated point is 
    zero.  *This error can occur if the value of the AccuracyGoal option
    is zero.



* exact

    Message names:
       GCD::exact:
       LCM::exact:

    Message:
       Argument expr at position n is not an exact number.


    Generated when the indicated function argument is expected to be an
    exact number.



* exd

    Message names:
       Dialog::exd:

    Message:
       To exit a dialog, type Return, or Return[expr]. To exit the 
       entire Mathematica session, type Exit[ ].


    Generated when Exit or Quit is used during an interactive dialog 
    (initiated with Dialog[ ]).  The symbols Exit and Quit are intended 
    for exiting Mathematica rather than an interactive dialog.

 

* exf

    Message names:
       ComplexExpand::exf:

    Message:
       Value of option TargetFunctions -> val does not contain any of the
          allowed functions list.


    Generated when the value of the TargetFunctions option in ComplexExpand 
    does not include any of the indicated functions.  *The value of the 
    TargetFunctions option is expected to be a list that includes Re, Im, 
    Abs, Arg, Conjugate, or Sign.  Other functions are ignored.



* expint

    Message names:
       AccountingForm::expint:
       EngineeringForm::expint:
       NumberForm::expint:
       PaddedForm::expint:
       ScientificForm::expint:

    Message:
       Result expr obtained by applying the value of the ExponentFunction 
          option to n should be an integer or Null.

    If the ExponentFunction option is not Automatic, its value is applied to 
    the exponent of each printed number to determine the exponent to print.  
    The result must be an integer or Null.  *Example: NumberForm[1.3 10^11, 
    ExponentFunction -> 6] -- the integer 6 is applied as a function to the 
    exponent, resulting in 6[11], which is not an integer; replacing the 
    option with ExponentFunction -> (6 &) will result in the integer 6.



* extra

    Message names:
       function::extra:

    Message:
       Extra argument at position n.


    Generated when the indicated function receives more arguments than 
    expected.



* faccp

    Message names:
       FactorInteger::faccp:

    Message:
       Unable to factor n completely.


    Generated when the argument to FactorInteger has not been completely 
    factored.



* facmm

    Message names:
       Factor::facmm:

    Message:
       Factoring multivariate polynomials with respect to a modulus is
          not implemented.


    Generated when the argument to Factor is a polynomial with more than
    one variable and the value of the Modulus option is non-zero.  *Example: 
    Factor[x + y, Modulus -> 7] -- if the value of the Modulus option is 
    non-zero, the expression to be factored should be a polynomial in a 
    single variable.



* facn

    Message names:
       FactorInteger::facn:

    Message:
       First argument e_1 in expr is not an exact number.


    Generated when the first argument to FactorInteger is not an integer, 
    rational number, or exact complex number.



* facnf

    Message names:
       FactorInteger::facnf:

    Message:
       Unable to factor n.


    Generated when the argument to FactorInteger has not been factored.

 

* fdate

    Message names:
       SetFileDate::fdate:

    Message:
       Date specification should be either the number of seconds since
          Jan 1, 1900 or a {y, m, d, h, m, s} list.


    Generated when the second argument in SetFileDate is not an integer 
    or a list.
 


* fddis

    Message names:
       FindMinimum::fddis:
       FindRoot::fddis:

    Message:
       Start specification expr does not contain distinct starting values.


    Generated when a start specification contains non-distinct starting
    values.  *Example: FindMinimum[(x - 1)^2, {x, {1, 1}}] -- the starting 
    values in the specification {x, {1, 1}} are expected to be distinct 
    numbers.



* fdin

    Message names:
       FindMinimum::fdin:
       FindRoot::fdin:

    Message:
       Form of start specification spec in expr is inconsistent with other
          start specifications.


    Generated when starting specifications in multidimensional FindMinimum 
    or FindRoot have incompatible forms.  *Symbolic derivatives are used 
    from a single starting point if the starting specifications have the 
    form {x, xstart} or {x, xstart, xmin, xmax}.  A derivative-free algorithm 
    is used if the starting specifications have the form {x, {x0, x1}}.  The 
    two types of starting specifications cannot be mixed.  *Example: 
    FindMinimum[3 x^2 + y^4, {x, 0}, {y, {0, 1}}] -- the starting 
    specifications for x and y have different forms.



* fdir

    Message names:
       CopyFile::fdir:
       DeleteFile::fdir:
       Get::fdir:
       RenameFile::fdir:

    Message:
       name is a directory; a file is expected.


    Generated when the indicated expression corresponds to a directory
    rather than a file.



* fdls

    Message names:
       FromDate::fdls:

    Message:
       expr is not a list of 6 machine-size integers.


    The argument to FromDate is expected to be a list of six machine-size 
    integers of the form {year, month, day, hour, minute, second}.



* fdss

    Message names:
       FindMinimum::fdss:
       FindRoot::fdss:

    Message:
       Search specification expr should be a list with 2-4 elements.


    Generated when the indicated argument to FindMinimum or FindRoot is not 
    of the form {x, xstart}, {x, {x0, x1}}, or {x, xstart, xmin, xmax}.
    *Example: FindRoot[x^2 == 3, x] -- the second argument must specify the 
    starting value as well as a variable, as in FindRoot[x^2 == 3, {x, 1}].



* fdst

    Message names:
       FindMinimum::fdst:
       FindRoot::fdst:

    Message:
       Expression spec in expr is not a valid start specification; a number
          or pair of numbers is expected.


    Generated when the start specification in the indicated argument to 
    FindMinimum or FindRoot is not a number or pair of numbers.  *Search 
    specifications are expected to be of the form {x, xstart}, {x, {x0, x1}}, 
    or {x, xstart, xmin, xmax}.  *Example: FindRoot[x^2 == 3, {x, {1, 2, 3}}] 
    -- in the search specification {x, {1, 2, 3}} the second element {1, 2, 3} 
    is used as a starting value or values for the variable x, and should be 
    a number or a pair of numbers.



* fdup

    Message names:
       Function::fdup:

    Message:
       Duplicate parameter par found in expr.


    Generated when a duplicate parameter name is found in the first argument
    to Function.  *Example: Function[{x, x}, x^3] -- the parameter x appears
    twice in the parameter list.



* fdups

    Message names:
       Function::fdups:

    Message:
       Conflicting parameters par_1 and par_2 found in expr.


    Generated when potentially conflicting parameter names are found in the
    first argument to Function.  *New symbols are generated from the 
    parameters in Function by adding a $ character to the parameter names.  
    Name conflicts can arise if parameter names ending in $ are used.
    *Example: Function[{x, x$}, x + x$] -- the internal symbol corresponding
    to x can conflict with the parameter x$.



* fdvc

    Message names:
       FindMinimum::fdvc:
       FindRoot::fdvc:

    Message:
       Variable number n has value val which cannot be compared with
       the bounds list.


    Generated when the indicated variable has assumed a non-numerical
    value, and cannot be compared with the limits of the search region.



* ffsp

    Message names:
       FontForm::ffsp:

    Message:
       expr is not a valid font specification of the form {"font", size}.


    Generated when the second argument in FontForm is not a list of the form 
    {"font", size}, where "font" is a string and size is a real number.

 

* fftl

    Message names:
       Fourier::fftl:

    Message:
       Argument expr is not a non-empty list of numbers.


    Generated when the argument to Fourier is not a non-empty vector or 
    matrix, or when the matrix contains non-numerical elements.  *Example: 
    Fourier[{{1.1, 3.0}, 2.1}] -- the argument is not a matrix; all lists 
    in a given dimension must have the same length.



* fglst

    Message names:
       FaceGrids::fglst:

    Message:
       Value for option FaceGrids -> val is not None, All, or a list with 6
          or fewer elements.


    The value of the FaceGrids option is expected to be None (for no grids), 
    All (for a grid on each face), or a list specifying grids for selected 
    faces.



* fgstl

    Message names:
       FaceGrids::fgstl:

    Message:
       expr is not a valid grid style specification.


    Generated when grid specification in the value of the FaceGrids option
    does not have an appropriate form.  *The grid specification for each 
    selected face in the FaceGrids option is expected to contain a list of 
    pairs for each grid direction.
 


* filex

    Message names:
       CopyDirectory::filex:
       CopyFile::filex:
       RenameDirectory::filex:
       RenameFile::filex:

    Message:
       Cannot overwrite existing file name.


    Generated when a file manipulation function will cause an existing
    file or directory to be overwritten.  *Example: CopyFile["file1", "file2"] 
    -- an error occurs if file2 already exists.



* filro

    Message names:
       function::filro:

    Message:
       Attempt to modify a read-only file during expr.
 

    Generated when a function does not have permission to modify the 
    indicated file.  *Example: DeleteFile["pfile"] -- an error can occur if 
    you do not have permission to delete pfile.  *This message is typically 
    a response to a corresponding message generated by the operating system 
    of your computer.



* first

     Message names:
        First::first:

     Message:
        expr has a length of zero and no first element.


     Generated when the argument in First has no first element.  *Example: 
     First[{} + {}] -- the argument {} + {} evaluates to {}, which has no 
     first element.



* fitc

    Message names:
       Fit::fitc:

    Message:
       Number of coordinates (n_1) is not equal to the number of 
	  parameters (n_2).


    Generated when the number of independent variables in the data (first
    argument) is not the same as the number of parameters (third argument).
    *If the first argument to Fit is an n X m  array, it is used as a list 
    of n data points with m - 1 independent variables and one response 
    variable.  The number of parameters in the third argument is then 
    expected to match the number of independent variables.
 


* fitd

    Message names:
       Fit::fitd:

    Message:
       First argument e_1 to Fit is not a list or rectangular array of data.


    Generated if the first argument to Fit is not a list or a rectangular 
    array.



* fitf

    Message names:
       Fit::fitf:

    Message:
       Second argument e_2 to Fit is not a list of functions.


    Generated if the second argument to Fit is not a list.



* fjnum

    Message names:
       FindRoot::fjnum:

    Message:
       Jacobian expr is not a n by n matrix of numbers at x = val.
          Try giving two starting values for each variable.


    Generated when the Jacobian of the objective function is not an
    appropriate matrix of real numbers at the indicated point.



* flatp

    Message names:
       FlattenAt::flatp:

    Message:
       Expression e_n at position n of expr has no parts and cannot be
          flattened.


    FlattenAt can only be used with normal expressions.  *Example: 
    FlattenAt[{a, b, c}, {1}] -- the element a at position {1} in {a, b, c} 
    is a symbol rather than a normal expression, and cannot be flattened.


* flpar

    Message names:
       Function::flpar:

    Message:
       Parameter specification spec in expr should be a symbol or a list
       of symbols.


    Generated when the parameter specification (first argument) in Function
    is not a symbol or list of symbols.  *Example: Function[g[t], g[t] + 5] 
    -- the expression g[t] is not a symbol and cannot be used as a parameter 
    in Function.  *Since Function has attribute HoldAll, a non-symbol 
    expression which might otherwise evaluate to a symbol cannot be used in 
    the parameter list.



* fmcv

    Message names:
       FindMinimum::fmcv:

    Message:
       FindMinimum failed to converge to the prescribed accuracy
       within n iterations.


    Generated when a limiting number of iterations is reached before
    finding the minimum of the function.



* fmdig

    Message names:
       FindMinimum::fmdig:

    Message:
       n working digits is insufficient to achieve the requested accuracy
       or precision.


    Generated when the requested accuracy or precision cannot be achieved
    with the indicated working precision.



* fmgl

    Message names:
       FindMinimum::fmgl:

    Message:
       Gradient expr is not a length n list of real numbers at x = val.


    Generated when the gradient of the objective function is not an
    appropriate real number or list of real numbers at the indicated
    point.  *Example: FindMinimum[Sqrt[x] - x, {x, 0}] -- the gradient
    of Sqrt[x] - x is singular at the starting point x = 0.



* fmgs

    Message names:
       FindMinimum::fmgs:

    Message:
       Could not symbolically find the gradient of expr. Try giving two
       starting values for each variable.


    Generated when the first argument to FindMinimum does not have a 
    symbolic derivative.  *If two starting values are given for each 
    variable, a different algorithm is used, and derivatives are not 
    needed.



* fmgz

    Message names:
       FindMinimum::fmgz:

    Message:
       Warning: FindMinimum encountered a vanishing gradient. The result
          returned may not be a minimum; it may be a maximum or a saddle
             point.


    Generated when the gradient of the function in the first argument
    to FindMinimum is zero at a point used by the algorithm.  *Example: 
    FindMinimum[x y, {x,1}, {y,1}] -- the function x y has a saddle point 
    at x=y=0.  *Example: FindMinimum[x^4 - x^2, {x, 0}] -- the starting point
    x == 0 is a local maximum with zero gradient; try using a different
    starting point, or giving a search region rather than a single starting 
    point, as in FindMinimum[x^4 - x^2, {x, 0, 1}].



* fmlab

    Message names:
       FrameLabel::fmlab:

    Message:
       Value of option FrameLabel -> val should be None or a label or a
          list with 2 or 4 elements.


    The value of the FrameLabel option is expected to be a list with 
    length equal to the number of frame axes.  *Example: Plot[Sin[x], 
    {x,0,9}, Frame -> Automatic, FrameLabel -> xlabel] -- the option 
    Frame -> Automatic produces an axis on each of the four sides of the 
    plot, and a label is expected for each axis; empty strings can be used 
    if no labels are needed, as in FrameLabel -> {xlabel, ""}.  *If no 
    frame axes are drawn (Frame -> None), the FrameLabel option is ignored.



* fmlim

    Message names:
       FindMinimum::fmlim:

    Message:
       The minimum could not be bracketed in n iterations.


    Generated when a limiting number of iterations is reached before
    finding the minimum of the function.  *Example: FindMinimum[Exp[x], 
    {x,0,1}] -- the function Exp[x] does not have a minimum.



* fmmp

    Message names:
       FindMinimum::fmmp:

    Message:
       Machine precision is insufficient to achieve the requested accuracy
          or precision.


    Generated when the value of PrecisionGoal or AccuracyGoal is too
    large for machine-precision calculations.



* fmns

    Message names:
       FindMinimum::fmns:

    Message:
       Starting value val in expr is not a real number.


    Generated when second and subsequent arguments to FindMinimum contain 
    starting values which are not real numbers.  *Example: FindMinimum[Sin[x], 
    {x, a}] -- the symbol a is not numerical and cannot be used as a starting 
    value.



* fmnum

    Message names:
       FindMinimum::fmnum:

    Message:
       Objective function expr is not real at x = val.


    Generated when the first argument to FindMinimum does not evaluate to 
    a real number at the indicated point.  *Example: FindMinimum[Sin[a x], 
    {x, 0, 1}] -- if the symbol a is not a number, the objective function 
    Sin[a x] will generally be non-numerical.



* fmreg

    Message names:
       FindMinimum::fmreg:

    Message:
       Search region limit expr in lims is not a real number.
       
       
    Generated when second and subsequent arguments to FindMinimum contain 
    complex or non-numerical limiting values for the search region.  *Example: 
    FindMinimum[x^2, {x, 0, -I, I}] -- FindMinimum requires that the limits of 
    the search region be real numbers.



* fnsym

    Message names:
       function::fnsym:

    Message:
       First argument in expr is not a symbol or a string naming a symbol.


    Generated when the first argument in the indicated expression is
    expected to be a symbol.  *Example: Attributes[f[x]] = HoldAll -- the 
    argument to Attributes must be a symbol; to set the attributes of f,
    use Attributes[f] = HoldAll.



* font

    Message names:
       Graphics::font:

    Message:
       Graphics font specification expr is not of the form {"name", size}.


    Font specifications are expected to have the form {"name", size},
    where "name" is the name of a font, and size is a numerical font size.
    *Example: Plot[Sin[x], {x,0,1}, DefaultFont -> {Courier, 10}] -- the 
    font name should be a string (enclosed in double quotes), as in 
    {"Courier", 10}.


* forml

    Message names:
       Format::forml:

    Message:
       Recursion depth limit $RecursionLimit exceeded while formatting output.


    Generated when the number of recursive calls to Format exceeds the value 
    of $RecursionLimit.  *Example: Format[f[x_, ___]] := f[x, "<>"] followed 
    by f[a, b] --this formatting rule could be applied indefinitely since 
    the result of applying the rule matches the pattern in the same rule.

 

* fpct

    Message names:
       Function::fpct:

    Message:
       Too many parameters in vars to be filled from expr.


    Generated when the number of parameters in Function exceeds the
    number of variables passed to the function.  *Example: f = 
    Function[{x, y, z}, x + y + z] followed by f[a, b] --the function 
    has been called with an insufficient number of arguments to supply 
    values to the three parameters in {x, y, z}.



* frdig

    Message names:
       FindRoot::frdig:

    Message:
       n working digits is insufficient to achieve the accuracy acc.


    Generated when the requested accuracy cannot be achieved with the
    indicated working precision.



* frjc

    Message names:
       FindRoot::frjc:

    Message:
       Could not symbolically find the Jacobian of expr. Try giving two
          starting values for each variable.


    Generated when the evaluated derivative of the first argument to
    FindRoot contains explicit derivatives.  *Example: FindRoot[x Abs[x], 
    {x, 0}] -- the derivative D[x Abs[x], x] will contain an explicit 
    derivative since Abs[x] is not analytic; try giving two starting values 
    so that a derivative is not needed, as in FindRoot[x Abs[x], {x, 0, 1}].



* frmp

    Message names:
       FindRoot::frmp:

    Message:
       Machine precision is insufficient to achieve the accuracy acc.


    Generated when the value of the AccuracyGoal option is too large
    for machine-precision calculations.



* frns

    Message names:
       FindRoot::frns:

    Message:
       Starting value val in expr is not a number.


    Generated when second and subsequent arguments to FindRoot
    contain non-numerical starting values.



* frnum

    Message names:
       FindRoot::frnum:

    Message:
       Function f is not a length n list of numbers at z = z_0.


    Generated when the first argument to FindRoot does not evaluate
    to a number or appropriate list of numbers at the indicated point.
    *Example: FindRoot[{y - Exp[x]}, {x, 0}, {y, 0}] -- since there
    are two variables, the first argument is expected to evaluate to a 
    list of two numbers.



* fromascii

    Message names:
       FromASCII::fromascii:

    Message:
       Argument expr is not an 8-bit ASCII code (integer in the range
          0 to 255).


    Generated when the indicated argument in FromASCII is not a valid
    ASCII code.  *Note that FromASCII is an obsolete function, superseded 
    by FromCharacterCode.



* frreg

     Message names:
        FindRoot::frreg:

     Message:
        Search region limits lims in expr are not numbers.


     Generated when the indicated argument to FindRoot contains non-numerical 
     limiting values for the search region.  *Example: FindRoot[x^2 == 0, 
     {x, 0, a, b}] -- the limits a and b are expected to evaluate to numbers.



* frsec

    Message names:
       FindRoot::frsec:

    Message:
       Secant method failed to converge to the prescribed accuracy after n
          iterations.


    Generated when the indicated iteration limit is reached before the 
    algorithm converges to a root of the function.



* fstr

    Message names:
       function::fstr:

    Message:
       File specification expr is not a string.


    File and directory specifications are expected to be entered as strings
    (enclosed in double quotes). *Example: FileType[ff] -- an error occurs 
    unless ff evaluates to a string.



* fttp

    Message names:
       Format::fttp:

    Message:
       Format type expr is not a symbol.


    Generated when the second argument to Format (in an assignment)
    is not a symbol.  *The second argument to Format is expected to be a 
    symbol representing a format type.  *Example: 
    Format[FortranForm, f[x_]] := ff[x, 0] -- the format type FortranForm 
    should be the second argument in Format.
 


* ftype

    Message names:
       FormatType::ftype:

    Message:
       Value of option FormatType -> val is not valid.


    Generated when a requested format type is not found among the types 
    listed in $PrintForms.  *Valid format types include TextForm, OutputForm,
    InputForm, CForm, FortranForm, and TeXForm.  *The format type is taken 
    from the setting of the FormatType option, which is an option to 
    InputStream, OutputStream, and ToString.  *Example: 
    Write[OpenWrite["data", FormatType -> cform], result] --the value cform 
    is not a known format type; try replacing cform with CForm.





* gamc

    Message names:
       Gamma::gamc:

    Message:
       Gamma[z, a] is too ill-conditioned to compute.


    Generated when the series used to compute the gamma function is too 
    ill-conditioned to be used at the indicated point.  *Example: 
    Gamma[10.^57 I, 10.^70] -- the asymptotic series for the gamma function 
    at these arguments cannot be used.



* gcc

    Message names:
       Show::gcc:

    Message:
       Graphics of type g cannot be combined with other types of graphics.


    Generated when the indicated graphics expression cannot be combined
    with other types of graphics.  *The type of a graphics expression is 
    determined by the head.  The message includes the head of the expression 
    which caused the error.  *Example: Show[GraphicsArray[... ], 
    Plot[x, {x, 0, 1}]] -- the initial GraphicsArray object cannot be 
    combined with other types of graphics, including the Graphics object 
    returned by Plot.



* gcct

    Message names:
       Show::gcct:

    Message:
       Graphics of type g_1 and g_2 cannot be combined.


    Generated by Show when the indicated types of graphics objects cannot be 
    combined.  *The type of a graphics object is determined by the head.
    The message includes the heads of the objects that caused the error.
    *Example: Show[Plot3D[x y, {x, 0, 1}, {y, 0, 1}], Plot[x, {x, 0, 1}]] 
    -- the three-dimensional graphics object returned by Plot3D and the 
    two-dimensional graphics object returned by Plot cannot generally be 
    combined without special conversion.



* gcomb

    Message names:
       Show::gcomb:

    Message:
       An error was encountered in combining the graphics objects in expr.


    Generated when Show is used to combine graphics objects and one or more 
    of the objects is invalid.  *Example: Show[Graphics[Point[{0,0}]], 
    ContourGraphics[ ]] --the empty graphics object ContourGraphics[ ] is 
    treated as an error and cannot be combined with other graphics objects.
    *This message is usually accompanied by separate messages describing
    the error in one of the graphics objects.



* gface

    Message names:
       FaceGrids::gface:

    Message:
       expr is not a valid face specification.


    Generated when the face specification in the value of the FaceGrids
    option is not of the form {1, 0, 0}, {-1, 0, 0}, {0, 1, 0}, {0, -1, 0}, 
    {0, 0, 1}, or {0, 0, -1}.  *In each element of FaceGrids -> 
    {{face_1, grid_1}, {face_2, grid_2}, ... }, grid_i describes the grid 
    on the face specified by face_i.



* gfile

    Message names:
       Graphics::gfile:

    Message:
       expr is not a filename or a list of filenames.


    Generated by an invalid specification for graphics output streams. 
    *Example: Display[outfile, Graphics[Point[{0, 0}]]] -- the first 
    argument to Display should be a filename, output stream, or a list of
    filenames and output streams; a filename should be enclosed in double
    quotes, as in Display["outfile", Graphics[... ]].



* glims

    Message names:
       ContourPlot::glims:
       DensityPlot::glims:
       Plot3D::glims:
       ParametricPlot3D::glims:

    Message:
       Limit lim_1 and limit lim_2 contain the same iteration variable.


    Generated when the indicated iteration limits use the same iteration
    variable.  *Example: Plot3D[x, {x,0,1}, {x,0,1}] -- the variable x is
    used here for both coordinate directions.  The variable names should
    be distinct.



* globf

    Message names:
       General::globf:

    Message:
       Cannot open object obtained by expansion of file.


    Generated when a file or directory specification containing a ``glob''
    or ``wild card'' character cannot be opened.  *Example: << *xx -- an 
    error will occur if no filename ending in the characters xx is found.

 

* globm

    Message names:
       General::globm:

    Message:
       Too many matches for pattern: names.


    Generated when too many matches are found for a file or directory
    name specified using ``glob'' or ``wild card'' characters.  *The 
    maximum number of matches depends on the computer you are using.
    *When this message appears, it may be necessary to use a more 
    restrictive pattern.



* globn

    Message names:
       General::globn:

    Message:
       No matches for pattern.


    Generated when no matches are found for a file or directory specified
    using ``glob'' or ``wild card'' characters.



* gmat

    Message names:
       ContourGraphics::gmat:
       DensityGraphics::gmat:
       SurfaceGraphics::gmat:

    Message:
       expr is not a rectangular array larger than 2 X 2.


    Generated when the first argument to ContourGraphics, DensityGraphics, 
    or SurfaceGraphics is not a rectangular array or is smaller than 2 X 2 .
    *Example: Show[ContourGraphics[{{3}}]] -- the matrix {{3}} is too small 
    to be used in ContourGraphics.



* gmed

    Message names:
       Show::gmed:

    Message:
       No graphics output medium specified.


    Generated when no valid medium is found for the output of graphics 
    functions.  *Graphics output is typically sent to the stream or pipe 
    specified by $Display.  *The output medium for plotting functions is 
    taken from the DisplayFunction option.  The default value of 
    DisplayFunction is $DisplayFunction, which in turn has the default value
    Display[$Display, #] &.  *The variable $Display is generally assigned a 
    system-specific value during initialization.  *Example: Display[outfile, 
    Graphics[Point[{0, 0}]] -- the first argument to Display is expected to 
    be an output medium specified by a string or stream; to send the output 
    to a file, enclose the name of the file in double quotes, as in 
    Display["outfile", Graphics[ ]].  *Example: Plot[Sin[t], {t, 0, 10}, 
    DisplayFunction -> (Display[outfile, #] &)] --the first argument to Display 
    in the DisplayFunction option is expected to be a string or stream 
    specifying an output medium.  *This message can also appear if the 
    requested output medium cannot be opened for writing.



* goto

    Message names:
       CompoundExpression::goto:

    Message:
       Label[expr] requested by Goto not found.


    Generated when there is no corresponding Label[tag] in a compound 
    expression containing Goto[tag].  *Goto[tag] can only branch to a 
    Label[tag] in the current compound expression.  *Example: ((x = 5); 
    Label[start]; If[x > 0, x--; Goto[start], x]) --note that Goto[start] 
    is in a compound expression which is nested within the compound 
    expression containing Label[start]; try restructuring the code.



* gprim

    Message names:
       General::gprim:

    Message:
       Unknown gtype primitive expr encountered.


    Generated when an expression is encountered which is not a known 
    graphics primitive for the indicated type of graphics.  *Example: 
    Show[Graphics[Box[{0, 0}, {1, 1}]]] -- there is no Box primitive in 
    Graphics; the Rectangle represents a rectangle, as in 
    Show[Graphics[Rectangle[{0, 0}, {1, 1}]]].



* gpt

    Message names:
       Graphics::gpt:

    Message:
       Coordinate expr is not of the form {x, y}.


    Generated when a coordinate specification in a two-dimensional
    graphics primitive is not a list with two elements.  *Two-dimensional 
    coordinate specifications are used in Text, Point, Polygon, Line, Disk, 
    Circle, Rectangle, Raster, and RasterArray.  *Example: 
    Show[Graphics[Point[{1, 2, 3}]]] -- points in two dimensions are 
    specified by two rather than three coordinates; replace {1, 2, 3} 
    with a list of two coordinates, as in Show[Graphics[Point[{1, 2}]]].



* gptn

    Message names:
       Graphics::gptn:

    Message:
       Coordinate val in expr is not a floating-point number.


    Generated when non-numerical elements are found in two-dimensional
    coordinate specifications.  *Example: Show[Graphics[Point[{a, b}]]] -- 
    the coordinate specification {a, b} is expected to be a pair of real 
    numbers.  *See also: coordform.



* grarr

    Message names:
       GraphicsArray::grarr:

    Message:
       expr is not a graphics object, a vector of graphics objects, or a
          matrix of graphics objects.


    Generated when the argument to GraphicsArray is not a list or
    rectangular array of graphics objects.  *Example: 
    Show[GraphicsArray[{g}]] -- the argument to GraphicsArray should be 
    a list or array of graphics objects.
 


* grid

    Message names:
       GridLines::grid:

    Message:
       expr is not a valid grid specification.


    The value of the GridLines option is expected to be None, Automatic, 
    or a list {xgrid, ygrid} specifying the grid in each direction.  *Each 
    grid line is described either by giving the position of the line or 
    by using a list {pos, style} indicating both the position and the 
    style of the line.  *Example: spec = {{Pi, {Dashing[{.01, .01}]}}} 
    followed by Plot[Sin[x], {x, 0, 7}, GridLines -> spec] -- if GridLines
    is a list, both grid directions must be specified, as in spec = {{{Pi, 
    {Dashing[{.01, .01}]}}}, None}.  *The value of the GridLines option 
    can also be a function which returns a grid specification when applied 
    to the minimum and maximum values of the plot.



* group

    Message names:
       Infix::group:
       Postfix::group:
       Prefix::group:

    Message:
       Grouping specification expr is not NonAssociative, None, Left, or 
          Right.

    Generated when the fourth argument to the indicated function is not
    NonAssociative, None, Left, or Right.  *Example: Infix[f[a,b],"+|-", 
    100, Associative] -- if f is associative, the fourth argument of 
    Infix should be None.



* gsing

    Message names:
       Graphics3D::gsing:
       Plot3D::gsing:

    Message:
       Singular homogeneous transformation generated.


    Generated when the transformation needed to display a surface is 
    singular.



* gsort

    Message names:
       Graphics3D::gsort:

    Message:
       More than 10^9 polygons to sort.


    Generated when the number of polygons to be sorted in displaying
    a graphics object is prohibitively large.



* gtype

    Message names:
       Display::gtype:
       PlotRange::gtype:
       Show::gtype:

    Message:
       h is not a type of graphics.

    Generated when an expression other than a valid graphics object is 
    found in the second argument to Display, the argument to PlotRange, 
    or the leading argument to Show.  *Valid graphics objects are identified 
    by their heads.  The unrecognized head is reported in the error message.
    *Valid graphics objects have a head of ContourGraphics, DensityGraphics, 
    Graphics, GraphicsArray, Graphics3D, Sound, or SurfaceGraphics.  
    *Example: Show[Line[{{0, 0}, {1, 1}}]] -- the graphics primitive Line
    should be enclosed in Graphics, as in  Show[Graphics[Line[{{0, 0}, 
    {1, 1}}]]].  If an option appears before graphics in the argument list 
    of Show, the unrecognized head is typically Rule.  *Example:  
    Show[Axes -> {0, 0}, Graphics[expr]] -- graphics and options are out 
    of order; options must appear after graphics, as in Show[Graphics[expr], 
    Axes -> {0, 0}].



* gval

    Message names:
       Plot3D::gval:

    Message:
       Function value expr at grid point xi = x, yi = y is not a real number.


    Generated when the indicated expression is expected to be a number.
    *Example: Show[SurfaceGraphics[{{a, b}, {c, d}}]] -- the first argument
    to SurfaceGraphics should be an array of numbers.  *This error can also 
    occur when functions such as ContourPlot, DensityPlot, and Plot3D 
    produce graphics primitives containing inappropriate non-numerical 
    expressions.



* hdiv

    Message names:
       HypergeometricPFQ::hdiv:

    Message:
       Warning: Divergent generalized hypergeometric series expr.


    Generated when the arguments to HypergeometricPFQ correspond to a 
    divergent series.



* head

    Message names:
       function::head:

    Message:
       Expression with head h expected at position n in expr.


    Generated when the indicated function argument is expected to be an 
    expression with a particular head.



* heads

    Message names:
       function::heads:

    Message:
       Heads h_m and h_n at positions m and n are expected to be the same.


    Generated when the heads of the indicated function arguments are 
    expected to be the same.  *Example: Union[f[1, 2, 3], g[1, 2, 3]] -- 
    the arguments to Union are all expected to have the same head.



* hmdir

    Message names:
       General::hmdir:

    Message:
       " ~ " should be followed by "/": only the current user's home 
          directory is supported.


    Generated when the special character " ~ " is not followed by "\ " in a 
    filename specification.  *Example: OpenRead["~user"] -- in the Unix 
    operating system, this notation is typically used to denote the home 
    directory of another user.



* hue

    Message names:
       Graphics::hue:

    Message:
       expr is not of length 1 or 3.


    Generated when the number of arguments in a Hue graphics directive is 
    not 1 or 3.  *Hue[n] is equivalent to Hue[n, 1, 1].
 


* ibase

    Message names:
       IntegerDigits::ibase:

    Message:
       Base n is not an integer greater than 1.


    Generated when the second argument to IntegerDigits is either a 
    non-integer, or is less than or equal to 1.  *Example: 
    IntegerDigits[117, -5] -- negative numbers cannot be used as a base.



* ibool

    Message names:
       MainSolve::ibool:

    Message:
       Value of option InverseFunctions -> val should be True, False,
          or Automatic.


    Generated when the InverseFunctions option does not have one of the 
    indicated values.  *The functions AlgebraicRules, Eliminate, and Solve
    use MainSolve, and can generate this message.



* icm

    Message names:
       Series::icm:

    Message:
       Series in expr to be combined have unequal expansion points x and y.


    Generated when unequal expansion points are encountered during arithmetic
    with series.  *Series (or SeriesData) expressions can only be added,
    multiplied, or otherwise combined if they have equal expansion points.
    *Example: Series[Sin[x], {x, a, 1}] + Series[Sin[x], {x, b, 1}] -- the 
    expansion points a and b should be the same.



* icon

    Message names:
       General::icon:

    Message:
       Icon deinit failed.


    Generated when an icon corresponding to the Mathematica process cannot
    be terminated when exiting the program.  *This message is not used on 
    all computers.



* idiv

    Message names:
       Integrate::idiv:

    Message:
       Integral does not converge.


    Generated when a symbolic definite integral is found to be divergent.
    *Example: Integrate[x2/(x^2 + 1), {x, -Infinity, Infinity}] -- this 
    expression represents a divergent integral.  *If an integration package 
    is loaded, these integrals may be handled differently, and the message 
    will not appear.  If this message is generated, the expression returned 
    by Integrate should be considered indeterminate.



* ifun

    Message names:
       Solve::ifun:

    Message:
       Warning: inverse functions are being used by Solve, so some
          solutions may not be found.


    Generated when Solve uses inverse functions, which might not be 
    single-valued, to obtain a solution.  *Example: Solve[Sin[x] == a, x] 
    -- this equation has an infinite number of solutions, of which Solve 
    will normally only return {{x -> ArcSin[a]}}.



* ilim

    Message names:
       Integrate::ilim:

    Message:
       Integration limit expr is not of the form {x,xmin,xmax}.


    Generated when second and subsequent arguments to Integrate are lists 
    with length other than 3.  *The first argument to Integrate is the 
    integrand, and the remaining arguments are expected to be variables 
    (indefinite integration), or lists of length 3 (definite integration).
    *Example: Integrate[f[x], x, {0, 1}] -- to integrate f[x] with respect 
    to x from 0 to 1, use Integrate[f[x], {x, 0, 1}].


* ilsm

    Message names:
       function::ilsm:

    Message:
       List of machine-size integers expected at position n in expr. 


    Generated when the indicated function argument is not a list of 
    machine-size integers.



* ilsmn

    Message names:
       function::ilsmn:

    Message:
       Single or non-empty list of non-negative machine-size integers
          expected at position n of expr.


    Generated when the indicated function argument is neither a 
    non-negative machine-size integer nor a list of non-negative
    machine-size integers.  *Example: Array[{2, 3}, f] -- the arguments 
    may have been reversed; to generate a 2 X 3  array, use Array[f, {2, 3}].

 

* ilsmp

    Message names:
       function::ilsmp:

    Message:
       Single or non-empty list of positive machine-size integers expected 
          at position n of expr.


    Generated when the indicated function argument is neither a positive 
    machine-size integer nor a list of positive machine-size integers.  
    *Example: Partition[{a, b, c}, 2.3] -- the number 2.3 is not an integer.




* incom

    Message names:
       Inner::incom:

    Message:
       Length n_1 of dimension d_1 in e_1 is incommensurate with length 
          n_2 of dimension 1 in e_2.


    Generated when the dimensions to be combined by Inner do not have the 
    same length.  *Example: Inner[f, {a, b}, {{x, y}}] -- the innermost
    dimension in {a, b} has length 2 and the outermost dimension in {{x, y}} 
    has length 1.



* indat

    Message names:
       Interpolation::indat:

    Message:
       Data point expr contains e_i which is not a real number.


    Generated when the indicated element of a data point is not a real 
    number.  *Each abscissa point in the first argument to Interpolation 
    is expected to be represented as a real number or a list of real numbers.
 


* inddp

    Message names:
       Interpolation::inddp:

    Message:
       The point p in dimension n is duplicated.


    Generated when a duplicate abscissa point is encountered in the indicated
    dimension of the data.



* indet

    Message names:
       function::indet:

    Message:
       Indeterminate expression expr encountered.


    Generated when various indeterminate expressions are encountered.
    *Example: Infinity - Infinity -- this expression is indeterminate.
    *Example: (x - x)^I -- an imaginary power of zero is indeterminate.
    *Example: ArcTan[0, 0] -- evaluation leads to the indeterminate form 
    0/0.



* indim

    Message names:
       Interpolation::indim:

    Message:
       The coordinates c in dimension n are not consistent with other
	  coordinates in this dimension.


    Generated when the number of distinct coordinates along a particular
    grid line from the data in Interpolation is not the same as the number 
    of points along a parallel grid line.  *The data in the first argument 
    to Interpolation are expected to represent abscissa and function values 
    on a rectangular grid.



* indl

    Message names:
       Interpolation::indl:

    Message:
       Derivative specification s from data point d is not a length n list
          of derivative values.


    Generated when the number of derivative values specified in the 
    indicated data point is not equal to the number of dimensions of
    interpolation.



* indn

    Message names:
       Interpolation::indn:

    Message:
       Derivative d from data point expr is not numerical.


    Generated when a derivative value from the indicated data point does 
    not evaluate to a number.



* indpt

    Message names:
       Interpolation::indpt:

    Message:
       Coordinate c in data point d does not match the corresponding 
          coordinate in list.


    Generated when the coordinate from the indicated data point does not
    lie on a grid line in the corresponding dimension.  *The data in the 
    first argument to Interpolation are expected to represent abscissa 
    and function values on a rectangular grid.



* indup

    Message names:
       Interpolation::indup:

    Message:
       The abscissa value x is duplicated.


    Generated when a duplicate abscissa point is encountered in the data.

 

* ineq

    Message names:
       Inequality::ineq:

    Message:
       Inequality called with n arguments; the number of arguments is
          expected to be an odd number >= 3.


    Generated when the number of arguments to Inequality is less than 3
    or is even.



* inequ

    Message names:
       Inequality::inequ:

    Message:
       Inequality called with 1 argument; the number of arguments is
          expected to be an odd number >= 3.


    Generated when the number of arguments to Inequality is less than 3
    or is even.



* infn

    Message names:
       Interpolation::infn:

    Message:
       Function value f from data point d is not a number.


    Generated when the function value in the indicated expression from
    the argument to Interpolation is not a number.  *The last element in 
    each data point should be the numerical value of the function, or 
    should be a list whose first element is the numerical value of the 
    function.



* infy

    Message names:
       Power::infy:

    Message:
       Infinite expression expr encountered.


    Generated when negative powers of 0 are encountered during evaluation.
    *Example: (1 - a/a)^-3 -- the base 1 - a/a evaluates to zero, and
    is raised to a negative power.



* inhr

    Message names:
       Interpolation::inhr:

    Message:
       Requested order is too high; order has been reduced to n.


    Generated when the value of the InterpolationOrder option is larger 
    than the number of interpolation points.  *Example: Interpolation[{2, 3, 
    5, 7, 9}, InterpolationOrder -> 6] --an interpolating polynomial of 
    order 6 cannot be uniquely determined from five data points.

 

* initstate

     Message names:
        General::initstate:

     Message:
        expr cannot be used during initialization.


     Generated by an implementation-dependent restriction violation during
     initialization.



* inlen

    Message names:
       Interpolation::inlen:

    Message:
       Inconsistent element e_i encountered; all data elements must have
          the same length.


    Generated when the first argument to Interpolation contains elements
    with different lengths.



* inlow

    Message names:
       Interpolation::inlow:

    Message:
       Dimension n has only 1 point; no interpolation can be done.


    Generated when the data in Interpolation represent a grid with only
    one distinct point in the direction of the indicated dimension.



* inmd

    Message names:
       Interpolation::inmd:

    Message:
       The last element in expr is a list with length other than 2.


    Generated when the last element in the indicated expression from the 
    argument to Interpolation is not a list with length 2.  In 
    multidimensional interpolation with derivatives, each element in
    the first argument to Interpolation should be of the form {x_i, y_i, 
    ... , {f_i, {dxf_i, dyf_i, ... }}} in which the last element is a list 
    of length 2.



* innd

    Message names:
       Interpolation::innd:

    Message:
       First argument in expr does not contain any data.


    Generated when the first argument to Interpolation is a list with no 
    elements.



* innf

    Message names:
       function::innf:

    Message:
       Non-negative integer or Infinity expected at position n in expr.


    Generated when the indicated expression is not a non-negative integer
    or Infinity.  *Example: Shallow[3, {a, b, c}] -- the second argument 
    to Shallow should be a non-negative integer or Infinity.



* inord

    Message names:
       Interpolation::inord:

    Message:
       Value of option InterpolationOrder -> val should be a positive
          integer.


    Generated when the value of the InterpolationOrder option in 
    Interpolation is not an integer, or is negative.  *This message can 
    also appear if InterpolationOrder exceeds the size of a machine 
    integer on your computer.



* inovf

    Message names:
       NIntegrate::inovf:

    Message:
       Overflow resulted when attempting to evaluate the integrand at x = val.


    Generated when numerical overflow occurs while evaluating the integrand
    at the indicated point.  *Example: NIntegrate[x^x, {x, 1, Infinity}] -- 
    the algorithm evaluates this integrand at points which result in numerical 
    overflow.  *Example: NIntegrate[x^x^x, {x, 1000, 1001}] -- evaluating 
    x^x^x at the point x = 1000.5 in the region of integration will lead 
    to numerical overflow.



* inpts

    Message names:
       Interpolation::inpts:

    Message:
       The total number n of data points is not a multiple of the number 
          m of points in dimension d.


    Generated when the first argument to Interpolation does not represent 
    a list of data points on a rectangular grid.



* ins

    Message names:
       Insert::ins:
       StringInsert::ins:

    Message:
       Cannot insert at position n in expr.


    Generated when insertion cannot be done at the positions specified
    in the third argument (position list) in Insert or StringInsert.  
    *Example: Insert[{a, b, c}, x, 5] -- insertion can only be done at 
    positions 1 through 4 in the list {a, b, c}.



* inset

    Message names:
       Set::inset:

    Message:
       Assignments cannot be performed during inspection.


    Generated when an assignment is entered during inspection.



* int

    Message names:
       function::int:

    Message:
       Integer expected at position n in expr.


    Generated when the indicated function argument is expected to be an 
    integer.



* intm

    Message names:
       function::intm:

    Message:
       Machine-size integer expected at position n in expr.


    Generated when the indicated function argument is either not an integer, 
    or is too large to be represented as a simple integer on your computer.
    *Example: StringInsert["abcefg", "d", {4}] -- to insert "d" at position 
    4 in "abcefg", use StringInsert["abcefg", "d", 4].



* intnm

    Message names:
       function::intnm:

    Message:
       Non-negative machine-size integer expected at position n in expr.


    Generated when the indicated function argument is not a non-negative 
    integer, or is too large to be represented as a simple integer on your 
    computer.  *Example: FixedPoint[Sin, 1.3, x] -- the third argument in
    FixedPoint should be a non-negative integer.



* intnz

    Message names:
       function::intnz:

    Message:
       Non-zero integer expected at position n in expr.


    Generated when the indicated function argument is either not an integer, 
    or evaluates to zero.  *Example: f[g[Print[Stack[_, _]]]] -- the second 
    argument to Stack is expected to be a non-zero integer.



* intpf

    Message names:
       function::intpf:

    Message:
       Positive integer or Infinity expected at position n in expr.


    Generated when the indicated function argument is not a positive 
    integer or Infinity.



* intpm

    Message names:
       function::intpm:

    Message:
       Positive machine-size integer expected at position n in expr.


    Generated when a function argument is either not a positive integer, or 
    is too large to be represented as a standard integer on your computer.
    *Example: SpaceForm[x] -- the argument x is expected to be a positive 
    integer.



* intpp

    Message names:
       Prime::intpp:

    Message:
       Positive integer argument expected in expr.


    Generated when the argument to Prime is not a positive integer.

 

* inum

    Message names:
       NIntegrate::inum:

    Message:
       Integrand expr is not numerical at x = val.


    Generated when the integrand in numerical integration does not evaluate
    to a number at the indicated point.  *Example: NIntegrate[Sin[a x], 
    {x, 0, 1}] -- if the symbol a is non-numerical, the integrand will not 
    be numerical.  *Note that this message will only appear if the function 
    is non-numerical at a point sampled by NIntegrate.  *Example: 
    NIntegrate[ If[.99 < x < 1.01, a, Sin[x]], {x, 0, 2}] -- the function 
    to be integrated is non-numerical near x = 1.  If {x, 0, 2} is replaced 
    by {x, 0, Pi}, no message is generated, since points near x = 1 are 
    never sampled.

 

* invc

    Message names:
       Inverse::invc:

    Message:
       Warning: Result for inverse of badly conditioned matrix m may
          contain significant numerical errors.


    Generated when a matrix is sufficiently close to being singular that
    numerical roundoff errors may significantly affect the result.



* ioarg

    Message names:
       function::ioarg:

    Message:
       Argument in expr is not valid for I/O operation.


    Generated by a file operation with an invalid argument.



* ioerr

    Message names:
       function::ioerr:

    Message:
       I/O error occurred during expr.


    Generated when an error occurs while manipulating external files or 
    directories.  A number of infrequent system problems, such as disk 
    errors, can lead to this message.  *This message is a response to a 
    corresponding message generated by the operating system of your computer.

 

* iopf

    Message names:
       function::iopf:

    Message:
       Value of option opt -> val should be an integer or Infinity.


    Generated when the value of the indicated option is expected to be an 
    integer or Infinity.



* iopnf

    Message names:
       function::iopnf:

    Message:
       Value of option opt -> val should be a non-negative integer or 
          Infinity.


    Generated when the value of the indicated option is not an integer
    or is negative.  *Example: ReplaceRepeated[f, f -> f[x], MaxIterations 
    -> None] -- the symbol None is not a non-negative integer or Infinity.




* iopnm

    Message names:
       function::iopnm:

    Message:
       Value of option opt -> val should be a non-negative machine-size
          integer.


    Generated when the value of the indicated option is not a non-negative
    integer or is too large to be represented as a standard integer on your 
    computer.



* ioppf

    Message names:
       function::ioppf:

    Message:
       Value of option opt -> val should be a positive integer or Infinity.


    Generated when the value of the indicated option is expected to be a 
    positive integer or Infinity.  *Example: Write[OpenWrite["data", 
    PageHeight -> 8.5], result] --the value 8.5 for the PageHeight option 
    is not a positive integer or Infinity; in this example, Infinity is used 
    instead.



* ipdat

    Message names:
       InterpolatingPolynomial::ipdat:

    Message:
       First argument expr should be a list of non-lists or a list of pairs.


    Generated when the first argument to InterpolatingPolynomial is neither
    a list of non-lists nor a list of pairs.



* ipdup

    Message names:
       InterpolatingPolynomial::ipdup:

    Message:
       The abscissae are not distinct.


    Generated when duplicate abscissa points are encountered in the 
    first argument to InterpolatingPolynomial.



* ipf

    Message names:
       InterpolatingPolynomial::ipf:

    Message:
       Ordinate expr from data element number n should be a non-list or
          a non-empty vector.


    Generated when the second element of a data pair in 
    InterpolatingPolynomial is not a single value or a list of single 
    values.  *The first argument to InterpolatingPolynomial is expected 
    to be a list of pairs.  The second element of each pair should be a 
    single value or a list of single values indicating derivatives at the
    corresponding abscissa point.

 

* iprf

    Message names:
       AccountingForm::iprf:
       EngineeringForm::iprf:
       NumberForm::iprf:
       PaddedForm::iprf:
       ScientificForm::iprf:

    Message:
       Formatting specification expr should be a positive integer or a 
	  pair of positive integers.


    The second argument to AccountingForm, EngineeringForm, NumberForm, 
    PaddedForm, and ScientificForm is expected to be a positive integer or 
    a list of two positive integers.  *Example: NumberForm[11.5, 2.7] -- 
    the first argument is the expression to be formatted, and the second
    argument specifies the number of digits.  *Example: AccountingForm[2.13, 
    NumberFormat -> StringJoin["$", #] &] --the second argument is interpreted 
    as an argument, rather than as an option; use parentheses to avoid 
    ambiguity, as in AccountingForm[2.13, NumberFormat -> 
    (StringJoin ["$", #] &)].



* ipval

    Message names:
       InterpolatingPolynomial::ipval:

    Message:
       Abscissa expr from data element number n should be a non-list.


    Generated when a list is encountered as the first element of a 
    coordinate pair in the first argument to InterpolatingPolynomial.
    *The first argument to InterpolatingPolynomial is expected
    to be a list of pairs, and the first element of each pair should be
    a single value representing an abscissa point of the polynomial.
    *Example: InterpolatingPolynomial[{{{1, 2}, 3}, {{2, 1}, 3}}, x] --
    the first element {1, 2} of the first pair is not a single value.



* ipvar

    Message names:
       InterpolatingPolynomial::ipvar:

    Message:
       expr cannot be used as the variable in a polynomial.


    Generated when the second argument to InterpolatingPolynomial cannot 
    be used as the variable of a polynomial.



* isdir

    Message names:
       function::isdir:

    Message:
       Cannot open directory for reading.


    Generated when a file to be opened for reading is a directory.



* istep

    Message names:
       NProduct::istep:
       NSum::istep:

    Message:
       Cannot get from a to b in steps of s.


    Generated when the step specification in NProduct or NSum is 
    incompatible with the limits.  *Example: NProduct[1, {n, 0, 10, 7}] -- 
    the product is ambiguous since it is not possible for n to range from 0 
    to 10 in steps of 7.



* iterb

    Message names:
       function::iterb:

    Message:
       Iterator expr does not have appropriate bounds.


    Generated when an iterator specification includes an invalid
    minimum value, maximum value, or step size.  *Example: Table[x, {n}] -- 
    when the iterator {n} is a list with one element, the element n must be 
    an integer.  *Example: Do[f[k], {k, n}] -- in a two-element iterator 
    k, n, the second element must be an integer.  *The fourth element of an 
    iterator is the step size.  If no fourth element is given, the default 
    step size is 1.  *Example: Sum[f[n], {n, 0, 3 I}] -- since the upper 
    limit of the range is complex, it is not possible to step through the 
    range in steps of 1.



* itfn

    Message names:
       NProduct::itfn:
       NSum::itfn:

    Message:
       expr does not have the correct form for an iterator.


    Generated when the iteration specification in NProduct or NSum is not 
    a list with one to four elements.  *Valid iteration specifications are 
    {i}, {i, imin}, {i, imin, imax}, and {i, imin, imax, di}, where i is 
    the iteration parameter and imin, imax, and di are numbers.



* itform

    Message names:
       function::itform:

    Message:
       Argument expr at position n does not have the correct form for an
          iterator.


    Generated when the indicated function argument is expected to have the 
    form of an iterator.  *A correctly formed iterator is a list with one 
    to four elements.  *Example: Table[f[n], n, 5 ] -- second and subsequent 
    arguments to Table are expected to be iterators; to construct a table 
    with n ranging from 1 to 5, use Table[f[n], {n, 5}].



* itlim

    Message names:
       $IterationLimit::itlim:

    Message:
       Iteration limit of n exceeded.


    Generated when the number of iterated evaluations of a single expression
    exceeds $IterationLimit.  *Example: a := b; b := a; a -- this combination 
    of rules could be applied indefinitely.  *If a large number of iterations 
    is needed for a particular computation, $IterationLimit can be set to a 
    larger value (or Infinity).



* itloc

    Message names:
       DefaultValues::itloc:
       DownValues::itloc:
       FormatValues::itloc:
       Messages::itloc:
       NValues::itloc:
       OwnValues::itloc:
       SubValues::itloc:
       UpValues::itloc:

    Message:
       expr currently contains iterator localizations, and cannot be set
          (to val).


    Generated when an expression localized as an iterator is encountered
    in a value assignment.  *Example: Do[DownValues[f] = {f[x_] -> x^2}, 
    {f[0], 3}] -- the method used to localize the iterator f[0] within 
    Do prevents certain assignments, such as assignments to DownValues[f].
    *This error occurs only if the iterator is not a symbol.



* itraw

    Message names:
       function::itraw:

    Message:
       Raw object expr cannot be used as an iterator.


    Generated when a raw expression is used as an iteration parameter.
    *Example: Table[x, {3,7}] -- the integer 3 is a raw expression and 
    cannot be used as an iteration parameter.  Raw objects include strings 
    and numbers.



* ittag

    Message names:
       function::ittag:

    Message:
       Cannot use expr as an iterator, since it contains no assignment tag.


    Generated when an expression with no assignment tag is used as an 
    iteration parameter.  *Example: Table[x, {x_, 2, 5}] -- the pattern 
    x_ does not contain a valid tag for use in assigning iterator values.



* ivar

    Message names:
       function::ivar:

    Message:
       expr is not a valid variable.


    Generated when the indicated expression cannot be used as a variable.
    *Example: PolynomialQ[a, b+c] -- the sum b+c cannot be used as a 
    variable.  *Most expressions other than strings, numbers, sums, 
    products, and integer powers are valid variables.
 


* jcpo

    Message names:
       JacobiSymbol::jcpo:

    Message:
       Second argument e_2 in expr should be an odd, positive integer.


    Generated when the second argument to JacobiSymbol is not an odd,
    positive integer.



* jfx

    Message names:
       JordanForm::jfx:

    Message:
       The input matrix cannot have finite precision.


    Generated if JordanForm is called with a matrix containing approximate
    numbers.  *There is no stable algorithm for computing JordanForm if the 
    matrix has finite precision.  *Most other matrix decomposition functions 
    and the Eigenvectors function can be used with finite precision matrices.

 

* jsing

    Message names:
       FindRoot::jsing:

    Message:
       Encountered a singular Jacobian at the point z = z_0. Try perturbing
          the initial point(s).


    Generated when the Jacobian of the first argument to FindRoot is 
    singular at a point used by the algorithm. *Example: FindRoot[x^2 == 3, 
    {x, 0}] -- the Jacobian is zero at x == 0; try a different starting 
    point, as in FindRoot[x^2 == 3, {x, 1}].



* largp

    Message names:
       Prime::largp:

    Message:
       Argument n in expr is too large for this implementation.


    Generated when the argument to Prime is too large for the version of 
    Mathematica on your computer.



* latm

    Message names:
       LatticeReduce::latm:

    Message:
       Matrix element expr is not an integer.


    Generated when the argument to LatticeReduce is a matrix with non-integer 
    elements.  *Example: LatticeReduce[{{1, 2}, {3, 4.0}}] -- the element 4.0
    is a real number rather than an integer.



* lcont

    Message names:
       Format::lcont:

    Message:
       Line continuation print object too wide.


    Generated when the formatted width of Continuation[n] for continuation 
    line n exceeds half the width of the page.  *Example: 
    Format[Continuation[n_]] := PaddedForm[n, 99] -- this assignment will 
    cause the line continuation print object to be 99 characters wide, 
    which is too wide for most output formats.



* lconv

    Message names:
       function::lconv:

    Message:
       QR algorithm failed to converge.


    Generated when the QR matrix decomposition algorithm needed for a
    requested operation did not converge.



* ldir

    Message names:
       Limit::ldir:

    Message:
       Value of option Direction -> val should be a number or Automatic.


    Generated when the value of the Direction option in Limit is not a 
    number or Automatic.



* level

    Message names:
       function::level:

    Message:
       Level specification expr is not of the form n, {n}, or {m, n}.


    Generated when a level specification argument is not an integer, or
    a list of one or two integers.  *Example: Count[{x, b, {c, x}}, a, 
    {1, 2, 3}] -- to count appearances of x in levels 1, 2, and 3, replace 
    the third argument with the level specification {1, 3}.  *Functions 
    that use level specifications include Apply, Cases, Count, DeleteCases, 
    FreeQ, Level, Map, MapIndexed, MemberQ, Position, Scan, and Select.

 

* lhsr

    Message names:
       Set::lhsr:
       SetDelayed::lhsr:
       TagSet::lhsr:
       TagSetDelayed::lhsr:
       TagUnset::lhsr:
       Unset::lhsr:
       UpSet::lhsr:
       UpSetDelayed::lhsr:

    Message:
       Replacing rule r_1 with rule r_2 since their left-hand sides and
          conditions are equivalent.


    Generated when the left-hand sides of two rules attached to the same
    symbol are equivalent.
 


* lights

    Message names:
       Graphics3D::lights:

    Message:
       Value of option LightSources -> val is not of the form
          {{pos, col}, {pos, col}, ...}.


    The value of the LightSources option is expected to be a list of
    pairs of the form {pos, col}, where pos is a list of three numbers 
    indicating a position in three-dimensional space, and col is a valid 
    GrayLevel or RGBColor specification.  *Example: Plot3D[x y, {x, 0, 1}, 
    {y, 0, 1}, LightSources -> {{3, 4, 5}, RGBColor[1, 1, 0]}] -- the 
    value of the LightSources option should be a list of pairs, as in 
    LightSources -> {{{3, 4, 5}, RGBColor[1, 1, 0]}}, rather than a 
    single pair.



* lim

    Message names:
       Limit::lim:

    Message:
       Limit specification expr is not of the form x -> x0.
 

    Generated when the limit specification (second argument to Limit) is 
    not a rule of the form x -> x_0, or when x is not a valid variable.  
    *Example: Limit[f[x], {x, 3}] -- use Limit[f[x], x -> 3] to compute the 
    limit of f[x] as x approaches 3.  *Example: Limit[f[a + b], (a + b) -> 3] 
    -- the sum a + b cannot be used as a variable.  *Invalid variables 
    include products, sums, integer powers, and numbers.



* limf

    Message names:
       Limit::limf:

    Message:
       Unable to determine limit direction from expr.


    Generated when the limit point in Limit is DirectedInfinity with a 
    symbolic direction.



* limset

    Message names:
       $IterationLimit::limset:
       $RecursionLimit::limset:

    Message:
       Cannot set sym to n; value must be Infinity or an integer at least min.


    The variables $RecursionLimit and $IterationLimit cannot be set to 
    values smaller than n, or to symbolic or non-integer values (other 
    than Infinity). *Example: $RecursionLimit = 5 -- the built-in lower 
    limit for $RecursionLimit is usually 20.



* linkd

    Message names:
       LinkObject::linkd:

    Message:
      link is dead; connection closed.


    Generated when the indicated expression corresponds to a dead link.

 

* linkf

    Message names:
       LinkOpen::linkf:

    Message:
       link failed.


    Generated when the indicated link cannot be opened.



* linkn

    Message names:
       LinkObject::linkn:

    Message:
       Argument link in expr has an invalid LinkObject number;
          the link may be dead.


    Generated when the number assigned to the indicated link is invalid.

 

* links

    Message names:
       LinkOpen::links:

    Message:
       Too many open links.


    Generated when a limiting number of open links is exceeded.

 

* linkv

    Message names:
       LinkObject::linkv:

    Message:
       Argument link in expr is not a valid LinkObject.


    Generated when the indicated expression does not have the form of
    a valid LinkObject.



* linkx

    Message names:
       LinkObject::linkx:

    Message:
       Argument link in expr is not an open LinkObject.


    Generated when the indicated expression does not correspond to
    an open LinkObject.



* list

    Message names:
       function::list:

    Message:
       List expected at position n in expr.


    Common message produced when the indicated argument is expected to
    be a list.  *Example: ComposeList[a, b] -- the first argument in
    ComposeList must be a list.



* locked

    Message names:
       Attributes::locked:
       ClearAll::locked:
       Protect::locked:
       SetOptions::locked:

    Message:
       Symbol sym is locked.


    The attributes and options of a locked symbol cannot be changed or 
    cleared.  *A symbol is locked if Attributes[symbol] includes Locked.
    *Protect[symbol] cannot be used with a locked symbol, since Protected 
    cannot be added to the attributes of the symbol.



* lockt

    Message names:
       Block::lockt:
       Dialog::lockt:

    Message:
       Cannot localize locked symbol sym in assignment e_n from local
          variable specification list.


    Generated when a locked symbol is used in an assignment in a local
    variable list.  Symbols with attribute Locked cannot be used as local 
    variables in Block, or in the DialogSymbols option of Dialog.  *A symbol 
    s is locked if Attributes[s] includes Locked.
 


* lockv

    Message names:
       Block::lockv:
       Dialog::lockv:

    Message:
       Cannot localize locked symbol sym in local variable specification
          list.


    Symbols with attribute Locked cannot be used as local variables in 
    Block, or in the DialogSymbols option of Dialog.  *A symbol s is locked 
    if Attributes[s] includes Locked.
 


* longp

    Message names:
       function::longp:

    Message:
       Pathname in expr is too long.


    Generated when the indicated string is too long to be used as a 
    pathname on your computer.  *The allowed length for pathnames is 
    determined by the operating system.  *This message is typically a 
    response to a corresponding error message generated by the operating 
    system of your computer.



* lpn

    Message names:
       ListPlot::lpn:

    Message:
       expr is not a list of numbers or pairs of numbers.


    Generated when the first argument to ListPlot is not a list of point 
    positions specified by real numbers or pairs of real numbers.  *All point 
    positions must be specificied in the same form, either as numbers or as 
    pairs of numbers.



* lsamps

    Message names:
       ListPlay::lsamps:

    Message:
       The first argument to ListPlay must be a list of samples or a list
          of lists of samples.


    Generated when the first argument in ListPlay is not a list.



* lset

    Message names:
       $Letters::lset:

    Message:
       Cannot set $Letters to val; value is not a list of strings or pairs
          of strings.


    Generated when a value to be assigned to $Letters is not a list, or 
    when an element of the list is neither a string nor a list of two 
    strings.



* lsfail

    Message names:
       LinearSolve::lsfail:

    Message:
       LinearSolve could not find solutions to the linear system.


    Generated when the algorithm used by LinearSolve for solving equations 
    with a non-zero modulus fails to find a solution.  *Example: 
    LinearSolve[{{3, 2}, {2, 4}}, {1, 1}, Modulus -> 2] --the equations 
    represented by these arguments do not have a solution modulo 2.



* lslc

    Message names:
       LinearSolve::lslc:

    Message:
       Coefficient matrix and target vector do not have the same length.


    Generated in LinearSolve[m, b] when the number of rows in the matrix m 
    is not equal to the number of elements in the vector b.  *The coefficient 
    matrix m and the target vector b are expected to be compatible with the 
    equation m . x == b.



* lspec

    Message names:
       function::lspec:

    Message:
       expr is not a valid color, thickness, or dashing specification.


    Generated when the indicated expression is expected to be a color,
    thickness, or dashing directive.  *This error occurs when an invalid 
    line-style specification is used, such as a specification of the style 
    of lines to use in a grid.



* lss

    Message names:
       Series::lss:

    Message:
       Logarithmic singularity encountered in expr.


    Generated when a logarithmic singularity is encountered during series 
    expansion.



* lsv

    Message names:
       LinearSolve::lsv:

    Message:
       Second argument expr is not a non-empty vector.


    Generated when the second argument in LinearSolve is not a list,
    or contains elements that are also lists.  *A vector is a list of 
    non-lists.  *Example: LinearSolve[{{a, b}, {c, d}}, {{1}, {2}}] -- 
    the second argument {{1}, {2}} is a list of lists rather than a vector.



* ltcol

    Message names:
       Graphics3D::ltcol:

    Message:
       Element n in LightSources option contains expr, which is not a valid
          GrayLevel or RGBColor directive.


    Generated when the indicated element in the value of the LightSources
    option does not include an appropriate GrayLevel or RGBColor
    specification.  *Each element in the value of the LightSources option 
    is expected to have the form {pos, col}, where pos is a list of three 
    numbers indicating a position in three-dimensional space, and col has 
    the form GrayLevel[level] or RGBColor[r, g, b].  *Example: Plot3D[x y, 
    {x, 0, 1}, {y, 0, 1}, LightSources -> {{{3, 4, 5}, RGBColor[.8]}}] -- 
    the specification RGBColor[.8] should have three arguments instead of 
    one.

 

* ltype

    Message names:
       LegendreP::ltype:
       LegendreQ::ltype:

    Message:
       LegendreType expr is expected to be Real or Complex.


    Generated when the LegendreType option (in LegendreP or LegendreQ) has 
    a value other than Real or Complex.



* lvlist

    Message names:
       Block::lvlist:
       Dialog::lvlist:
       Module::lvlist:
       With::lvlist:

    Message:
       Local variable specification expr is not a List.


    The first argument in Block, the first argument in Module, and the value 
    of the DialogSymbols option in Dialog must be a list of symbols or 
    assignments to symbols.  *The first argument in With must be a list 
    of assignments to symbols.  If only a single symbol or assignment appears, 
    it must be enclosed in a list.  *Example: Block[x, f[x]] -- the symbol 
    x must be enclosed in a list, as in Block[{x}, f[x]].  *Example: 
    With[x = 5, f[x]] -- the assignment x = 5 must be enclosed in a list, 
    as in With[{x = 5}, f[x]].



* lvset

    Message names:
       Block::lvset:
       Dialog::lvset:
       Module::lvset:
       With::lvset:

    Message:
       Local variable specification list contains e_n which is an
          assignment to expr; only assignments to symbols are allowed.


    Generated when an assignment to a non-symbol appears in a local 
    variable specification in Block, Dialog, Module, or With.  *Example: 
    Module[{f[x_] = x^2}, g[x]] -- the expression f[x_] is not a symbol 
    and cannot be used in the local variable list; the assignment can be 
    moved to the body of the Module, as in Module[{f}, f[x_] = x^2; g[x]].

 

* lvsym

    Message names:
       Block::lvsym:
       Dialog::lvsym:
       Module::lvsym:

    Message:
       Local variable specification list contains e_n which is not a symbol
          or an assignment to a symbol.


    Each element in the local variable list in Block, Dialog, or Module, 
    is expected to be a symbol or an assignment to a symbol.  *Example: 
    Block[{x, f[x]}, g[x]] -- the expression f[x] is not a symbol and cannot 
    be used as a local variable.



* lvw

    Message names:
       With::lvw:

    Message:
       Local variable specification spec contains expr which is not an
       assignment to a symbol.


    Generated when an expression other than an assignment to a symbol is 
    used in the local variable specification in With.



* lvws

    Message names:
       With::lvws:

    Message:
       Variable var in local variable specification spec requires a value.


    Generated when the local variable specification in With contains a 
    symbol which is not part of an assignment.



* mathid

    Message names:
       General::mathid:

    Message:
       The machine you are running on (with name "host" and mathid id) is
          not in list. See installation instructions on how to set up your 
	     mathpass file.


    Generated when the password file on your computer cannot be used.



* matrix

    Message names:
       function::matrix:

    Message:
       Argument expr at position n is not a rectangular matrix.


    Generated when the indicated function argument is not a rectangular
    matrix.  *This message can be produced by a number of graphics and 
    linear algebra functions which require certain arguments to be 
    rectangular matrices.  *Example: PseudoInverse[{{1, 2, 3}, {4, 5}}] -- 
    the first argument to PseudoInverse must be a rectangular matrix.
    *Example: Show[Graphics[RasterArray[{{1, 2}, 3, 4}]]] -- the first
    argument in RasterArray must be a rectangular matrix.



* matsq

    Message names:
       function::matsq:

    Message:
       Argument expr at position n is not a square matrix.


    Generated when the indicated function argument is expected to be a 
    square matrix.  *A number of graphics and linear algebra functions 
    require certain arguments to be square matrices.  *Example: 
    Det[{{1, 2, 3}, {4, 5, 6}}] -- the determinant function Det is only 
    meaningful if the argument matrix is square.



* mbox

    Message names:
       General::mbox:

    Message:
       MatchBox cannot occur in transformation rule source.


    The special symbol MatchBox is used by internal code and should not be 
    used in rules.  *Example: f[MatchBox[x_]] := x^2 -- replace MatchBox
    with another symbol.



* mesh

    Message names:
       MeshStyle::mesh:

    Message:
       expr is not a valid MeshStyle specification; using the default.


    The value of the MeshStyle option is expected to be a list of graphics 
    directives specifying the style of mesh lines.  *Example: DensityPlot[x y, 
    {x, 0, 1}, {y, 0, 1}, MeshStyle -> Dashing[{.01, .01}]] --the value of 
    MeshStyle should be a list; for dashed mesh lines, use MeshStyle -> 
    {Dashing[{.01, .01}]]}.



* meshr

    Message names:
       ContourGraphics::meshr:
       DensityGraphics::meshr:
       SurfaceGraphics::meshr:

    Message:
       Value of option MeshRange -> val is not of the form {{xmin, xmax}, 
          {ymin, ymax}}.

    The value of the MeshRange option is expected to be a list containing 
    two pairs of numbers, such as {{0,2},{-5,5}}.



* messg

     Message names:
        MessageName::messg:

     Message:
        Message expr is not a string.


     Generated when the right-hand side of a MessageName (symbol::tag) is 
     not a string.  *Example: f::bad := f[1, "error"] -- the expression
     f[1, "error"] is a normal expression rather than a string; the 
     right-hand side of the assignment must be a string.



* meta

    Message names:
       StringPosition::meta:
       StringReplace::meta:

    Message:
       Value of option MetaCharacters -> val is not None, Automatic,
          a string of length 3, or a list of three strings.


   Generated when the value of the MetaCharacters option does not have the
   indicated form.



* method

    Message names:
       MainSolve::method:

    Message:
       Value of option Method -> val is expected to be 1, 2, or 3.


    Generated when the Method option does not have one of the indicated
    values.  *The functions AlgebraicRules, Eliminate, and Solve use 
    MainSolve and can generate this message.



* minmax

    Message names:
       NIntegrate::minmax:

    Message:
       MinRecursion (min) is greater than MaxRecursion (max).


    Generated if the value of the MinRecursion option is larger than the 
    value of the MaxRecursion option.



* mode

    Message names:
       MainSolve::mode:

    Message:
       Value of option Mode -> val is expected to be Generic, Modular,
          or Rational.


    Generated when the value of the Mode option is not Generic, Modular, 
    or Rational.  *The functions AlgebraicRules, Eliminate, and Solve
    use MainSolve and can generate this message.



* modm

    Message names:
       function::modm:

    Message:
       Modulus m is too large for this implementation.


    Generated when the value of the Modulus option is too large to
    be used on your computer.



* modn

    Message names:
       function::modn:

    Message:
       Value of option Modulus -> val should be a non-negative integer.


    Generated when the value of the Modulus option is not an integer or 
    is negative.  *Example: Inverse[{{1, 2}, {3, 4}}, Modulus -> m] -- 
    the value m of the Modulus option is expected to evaluate to a 
    non-negative integer.



* modnc

    Message names:
       $ModuleNumber::modnc:

    Message:
       Warning: Newly created symbol names may conflict with existing ones.


    Generated when the value assigned to $ModuleNumber is smaller than the 
    value associated with a current symbol.  *The value of $ModuleNumber 
    is used by Module and Unique to generate symbols with unique names, 
    and is normally incremented after each use.  Name conflicts can arise 
    if $ModuleNumber is set to a value smaller than a value still in use.

 

* modp

   Message names:
      function::modp:

   Message:
      Value of option Modulus -> val should be a prime number.


   Generated when the value of the Modulus option is not prime.  *Example: 
   Inverse[{{1,2},{3,4}}, Modulus -> 4] -- the value 4 of the Modulus option 
   is not prime.



* mptc

    Message names:
       MapThread::mptc:

    Message:
       Incompatible dimensions of objects at positions {2, n_1} and {2, n_2}
          of expr; dimensions are d_1 and d_2.


    Generated when threading is requested over subexpressions with unequal
    lengths or dimensions.  *Example: MapThread[f, {{a,b},{1,2,3}}] -- the 
    sublists {a,b} and {1,2,3} have different lengths and cannot be used in 
    threading.
 


* mptd

    Message names:
       MapThread::mptd:

    Message:
       Object e_1 at position {2, p} in e_2 has only m of required n 
          dimensions.


    Generated when the second argument to MapThread does not have sufficient 
    dimensions for the requested threading.  *Example: MapThread[f, 
    {{a, b, c}, {1, 2, 3}}, 2] -- threading cannot be done at depth 2 in 
    {{a, b, c}, {1, 2, 3}}; only depth 0 or 1 can be used.

 

* msgl

    Message names:
       Message::msgl:

    Message:
       $MessageList expr not a list; reset to {}.


    Generated during evaluation of Message when the value of $MessageList 
    is not a list.  *The global variable $MessageList is used to accumulate 
    a list of message names, and is required to be a list when each new 
    message name is added.  *Example: $MessageList = 0; Message[f::tag] -- 
    the function Message[f::tag] tries to add the message name f::tag to 
    $MessageList, and generates an error since $MessageList has been assigned 
    a value that is not a list.



* mult

    Message names:
       function::mult:

    Message:
       Value of option Multiplicity -> val is not a positive integer.


    Generated when the value of the Multiplicity option is not a positive 
    integer.



* mxst

    Message names:
       NDSolve::mxst:

    Message:
       Maximum number of steps reached at the point x.


    Generated when the number of steps used to solve the differential 
    equation exceeds the value of the MaxSteps option.  A large number 
    of steps can be required to solve equations for which the solution 
    is oscillatory or nearly singular.



* name

    Message names:
       Message::name:

    Message:
       Message name expr is not of the form symbol::name or
          symbol::name::language.


    Generated when the first argument to Message is not an expression
    of the form symbol::name or symbol::name::language.  *The special 
    form symbol::name is equivalent to MessageName[symbol, name].  This 
    error occurs if the first argument to Message is not an expression 
    with a head of MessageName and a length of two or three.  The second 
    and third arguments to MessageName are required to be strings (enclosed 
    in double quotes), as in MessageName[symbol, "name"].



* nbdd

    Message names:
       ConstrainedMax::nbdd:
       ConstrainedMin::nbdd:

    Message:
       Specified domain appears unbounded.


    Generated when the objective function in ConstrainedMin or 
    ConstrainedMax does not have a finite solution within the specified 
    region.  *Example: ConstrainedMax[x + 2, {x > 5}, x] -- the function 
    x + 2 does not have a finite maximum in the region x > 5.



* nbddt

    Message names:
       ConstrainedMax::nbddt:
       ConstrainedMin::nbddt:

    Message:
       Specified domain appears unbounded, with tolerance tol.


    Generated when the objective function in ConstrainedMin or 
    ConstrainedMax does not have a finite solution within the specified 
    region, as determined using the indicated tolerance.  *Example: 
    ConstrainedMax[x + 2, {x > 5}, x, Tolerance -> .0001] -- the function 
    x + 2 does not have a finite maximum in the region x > 5.



* ncvb

    Message names:
       NIntegrate::ncvb:

    Message:
       NIntegrate failed to converge to prescribed accuracy after n
          recursive bisections in x near x = val.


    Generated when the adaptive integration algorithm reaches a limiting
    number of recursive subdivisions of the indicated interval before 
    detecting convergence.  *Example: NIntegrate[1/Log[x], {x, 1, 2}] -- 
    the integrand 1/Log[x] has a non-integrable singularity at x = 1.
    *This error is typically caused by divergent integrals or integrals
    which converge very slowly.  *A limit to the number of recursive 
    subdivisions of the integration region is included to prevent infinite 
    recursion.  The option MaxRecursion can be used to set the maximum 
    number of recursive subdivisions.



* ncvi

    Message names:
       NIntegrate::ncvi:

    Message:
       NIntegrate failed to converge to prescribed accuracy after n
          iterated refinements in x in the interval list.


    Generated when the iterative integration algorithm fails to converge
    in the indicated region.



* ncvs

    Message names:
       NIntegrate::ncvs:

    Message:
       NIntegrate failed to converge near the apparently non-integrable
          singularity at x = x_0.


    Generated when the integrand appears to contain a non-integrable
    singularity.  *Example: NIntegrate[1/x^2, {x, 0, 1}, Method -> 
    DoubleExponential] --the singularity at x = 1 is not integrable.



* ndcf

    Message names:
       NDSolve::ndcf:

    Message:
       Repeated convergence test failure at x = val; unable to continue.


    Generated when NDSolve is unable to continue due to repeated failure
    of a convergence test in the adaptive algorithm.  *This error can occur 
    if the differential equation has singular or oscillatory solutions.



* ndcom

    Message names:
       NDSolve::ndcom:

    Message:
       Compilation failed for expr with variable var.


    Generated when the indicated function from the list of differential
    equations cannot be compiled.



* ndeqf

    Message names:
       NDSolve::ndeqf:

    Message:
       Number of differential equations is less than number of unknown
          functions.


    Generated when the number of functions to be solved for is larger than 
    the number of differential equations.



* nderr

    Message names:
       NDSolve::nderr:

    Message:
       Repeated error test failure at x = val; unable to continue.


    Generated when NDSolve is unable to continue due to repeated failure 
    of an error test in the adaptive algorithm.  *This error can occur 
    if the differential equation has singular or oscillatory solutions.



* ndin

    Message names:
       NDSolve::ndin:

    Message:
       Insufficient number of initial conditions.


    Generated when the number of initial conditions in the arguments to 
    NDSolve do not determine the solution.  *Example: NDSolve[{y'[x] == x^2}, 
    y, {x, 0, 2}] -- no initial conditions have been included, so the 
    equation cannot be solved numerically.  *Since a list with more than 
    one element is needed to represent the constraints and differential 
    equations, this message can appear if the first argument in NDSolve 
    is not a list.



* ndinn

    Message names:
       NDSolve::ndinn:

    Message:
       Initial condition expr is not a number.


    Generated when non-numerical starting values are encountered for the 
    differential equations.  *Example: NDSolve[{y'[x] == x, y[0] == x}, y, 
    {x, 0, 1}] -- the starting value given in y[0] == x is not a numerical 
    constant.



* ndlim

    Message names:
       NDSolve::ndlim:

    Message:
       Limit specification expr is not of the form {x, xend} or
	  {x, xmin, xmax}.


    Generated when the third argument to NDSolve is not a list with two or 
    three elements.
 


* ndnl

    Message names:
       NDSolve::ndnl:

    Message:
       Limit val in limits is not a real number.


    Generated when the indicated value in the limit specification in NDSolve
    is not a real number.

 

* ndnum

    Message names:
       NDSolve::ndnum:

    Message:
       Differential equation does not evaluate to a number at x = x_0.


    Generated when the right-hand side of the differential equations in
    NDSolve does not evaluate to a number at the indicated point.



* ndode

    Message names:
       NDSolve::ndode:

    Message:
       Input is not an ordinary differential equation of f.


    Generated when the first argument to NDSolve does not represent
    a system of ordinary differential equations in the functions listed
    in the second argument.



* ndord

    Message names:
       NDSolve::ndord:

    Message:
       The order of derivative expr is not an integer.


    Generated when the order of a derivative in NDSolve is not an 
    integer.  *The numerical differential solver can only use equations 
    described using derivatives with integer order.  *Example: 
    NDSolve[{Derivative[m][y][x] == y[x], y[0] == 1}, y, {x, 1}] -- the 
    order m of the derivative should be an integer.



* ndsss

    Message names:
       NDSolve::ndsss:

    Message:
       Value of option StartingStepSize -> val is not a non-negative
          real number or Automatic.


    Generated when the value of the StartingStepSize option is not a 
    number or is negative.



* ndsv

    Message names:
       NDSolve::ndsv:

    Message:
       Cannot find starting point of var.


    Generated when NDSolve is unable to find a starting value for the
    indicated variable.



* ndsz

    Message names:
       NDSolve::ndsz:

    Message:
       At f = g, step size is effectively zero; singularity suspected.


    Generated when the adaptive algorithm used by NDSolve is forced
    to reduce the step size to a value near zero, within numerical 
    uncertainty.  *Example: NDSolve[{y'[x] == 1/(x - 2) , y[0] == 1}, 
    y[x], {x, 0, 3}] --the differential equation has a singularity at x = 2.



* ndtol

    Message names:
       NDSolve::ndtol:

    Message:
       Requested tolerances are too small.


    Generated when the value of the PrecisionGoal or AccuracyGoal
    option leads to a tolerance that cannot be achieved using the 
    current WorkingPrecision.



* neq

    Message names:
       Roots::neq:

    Message:
       expr is expected to be a polynomial equation in the variable x.


    Generated when the first argument to Roots is not a polynomial equation 
    in the specified variable (second argument).  *Example: Roots[Sin[x] == 1, 
    x] -- the function Roots is only intended for solving polynomial 
    equations; try using Solve.



* newl

    Message names:
       Syntax::newl:

    Message:
       The newline character after "input" is understood as a multiplication
          operator.


    Generated when a whitespace character (space, linefeed, carriage return,
    etc.) is treated as implied multiplication.



* newsym

    Message names:
       General::newsym:

    Message:
       Symbol sym is new.


    Generated whenever a new symbol is created.  *This message is intended 
    primarily for program debugging, and is typically turned off.  *The 
    message can be turned on using On[General::newsym].



* newv

    Message names:
       AlgebraicRules::newv:

    Message:
       expr involves variables not among vars.


    Generated when an AlgebraicRulesData object is used to transform an 
    expression containing variables which are not in the list of known 
    variables.  *Example: rules = AlgebraicRules[{a == x, b == y}, {a, b}] 
    followed by a b z /. rules -- the list of variables {a, b, x, y} 
    contained in rules does not include the symbol z.



* nfdir

    Message names:
       function::nfdir:

    Message:
       Directory not found during expr.


    Generated when a requested directory is not found.  *This message is 
    typically a response to a corresponding message generated by the 
    operating system of your computer.



* nffil

    Message names:
       function::nffil:

    Message:
       File not found during expr.


    Generated when functions which manipulate external files are unable to 
    locate the indicated file.  *Example: FileDate["ff"] -- an error occurs 
    if no file named "ff" is found.  *This message is typically a response 
    to a corresponding message generated by the operating system of your 
    computer.
 


* ninf

    Message names:
       NIntegrate::ninf:

    Message:
       Invalid use of infinity in integration limits expr.


    Generated by an incorrect use of Infinity, DirectedInfinity, or 
    ComplexInfinity in numerical limits of integration.  *The direction 
    of infinity in the complex plane is specified as the argument to 
    DirectedInfinity.  Non-directional infinity (ComplexInfinity or 
    DirectedInfinity[ ]) may not be used as a numerical limit of integration.
    *Example: NIntegrate[1/x, {x, 1, ComplexInfinity}] -- the symbol 
    ComplexInfinity represents non-directional infinity.  *Example: 
    NIntegrate[1, {x, I Infinity, Infinity}] -- numerical integration 
    generally cannot be done from one direction of infinity to another.



* nintp

    Message names:
       NIntegrate::nintp:

    Message:
       Encountered the non-number expr at x = x_0.


    Generated when a non-numerical integrand is encountered at the 
    indicated point.



* ninv

    Message names:
       PowerMod::ninv:

    Message:
       p is not invertible modulo n.

 
    Generated when a requested modular inverse does not exist.  *Example: 
    PowerMod[15, -1, 3] -- since the modulus 3 divides 15, 15 is not 
    invertible modulo 3.



* nlicenses

    Message names:
       General::nlicenses:

    Message:
       a: b: Number of licenses (n) must be a positive integer.


    Generated when the number of licenses for your copy of Mathematica is 
    not a positive integer.



* nlim

    Message names:
       NIntegrate::nlim:

    Message:
       x = val is not a valid limit of integration.


    Generated when non-numerical limits of integration are encountered 
    during numerical integration.  *Example: NIntegrate[x Exp[x], {x, 0, a}] 
    -- the symbol a is used as a limit for the variable x, and is expected 
    to evaluate to a number (or infinity).  *The message includes both the 
    integration variable or variables and the corresponding non-numerical 
    limits.  *In multidimensional integrals, an error can occur if the 
    limits are found to be non-numerical at a point on the boundary of the 
    region of integration.  *Example: NIntegrate[x y, {x, 0, 1}, {y, 0, a}] 
    -- if a is non-numerical, the message will indicate that the point 
    {x, y} = {0.5, a} on the boundary of the integration region is not a 
    valid limit of integration.



* nlist3

    Message names:
       function::nlist3:

    Message:
       expr is not a list of three numbers.


    Generated when the indicated expression is expected to be a list of 
    three numbers.  *A list of three numbers is frequently used in 
    three-dimensional graphics primitives to indicate a point in 
    three-dimensional space.  *Options which use lists of three numbers 
    include BoxRatios, LightSources, ViewCenter, ViewPoint, and ViewVertical.
    *Example: Plot3D[x y, {x, 0, 1}, {y, 0, 1}, ViewPoint -> {}] --the value 
    of the ViewPoint option is expected to be a list of three numbers.



* noctx

    Message names:
       End::noctx:
       EndAdd::noctx:
       EndPackage::noctx:

    Message:
       No previous context defined.


    Generated when End[ ] or EndPackage[ ] is used without a corresponding 
    Begin or BeginPackage.  *End[ ] restores the previous context (the 
    context before the most recent Begin), and produces this error if 
    there is no previous context.  *EndPackage[ ] restores both the 
    previous context and the previous context path, and produces this 
    error if previous values are not found.



* nodef

    Message names:
       Pattern::nodef:

    Message:
       No default setting found for var in position n when length is len.


    Generated when a function argument in a rule is an optional pattern
    with no default value.  *Example: f[x_, y_.] := {x, y^2} -- a default 
    value d for the optional argument y_. can be assigned using 
    Default[f, 2] := d, or by entering the rule as f[x_, y_:d] := {x, y^2}.

 

* nodir

    Message names:
       CopyDirectory::nodir:
       DeleteDirectory::nodir:
       RenameDirectory::nodir:

    Message:
       Directory name not found.


    Generated when a requested directory cannot be found.  *Example: 
    RenameDirectory["dir1", "dir2"] -- an error occurs if no directory with 
    name dir1 is found.



* noinv

    Message names:
       InverseFunction::noinv:

    Message:
       The function f is not invertible.


    Generated when the indicated function does not have an inverse.  *Example: 
    InverseJacobiDN[x, 0] -- the JacobiDN function does not have an inverse 
    when the second argument is 0.



* nolast

    Message names:
       Last::nolast:

    Message:
       expr has a length of zero and no last element.


    Generated when the argument in Last has no last element.  *Example: 
    Last[5 {}] -- the argument 5 {} evaluates to {}, which has no last 
    element.



* nolev

    Message names:
       Inner::nolev:

    Message:
       Level n is not available in expr (dimensions d).


    Generated when the size of the fifth argument (depth specification) 
    in Inner exceeds the depth of the second argument.  *Example: 
    Inner[f, {a}, {b}, g, 2] -- the depth specification 2 is greater 
    than the depth of a.



* nomatch

    Message names:
       Information::nomatch:

    Message:
       No symbol matching pattern found.


    Generated when information is requested for a string pattern for 
    which there are no matching symbols.



* nomathid

    Message names:
       General::nomathid:

    Message:
       a: b: mathid (field 2) missing. See installation instructions on
          how to set up your mathpass file.


    Generated when the mathpass file for your copy of Mathematica is not
    correctly formatted.



* none

    Message names:
       On::none:

    Message:
       Message expr not found.


    Generated when an argument to On does not correspond to a known message.
    *Example: On[f::err] -- an error occurs if no message with name f::err 
    is found.



* nonopt

    Message names:
       function::nonopt:

    Message:
       Options expected (instead of e_n) beyond position m in expr.  An 
          option must be a rule or a list of rules.


    Generated when options are expected at the indicated positions.  *Example: 
    Factor[a,b] -- all arguments in Factor other than the first should be 
    options.



* noopen

    Message names:
       General::noopen:

    Message:
       Cannot open file.


    Generated by functions such as Encode, Get, OpenAppend, OpenRead, or 
    OpenWrite, whenever a requested file cannot be opened.  *Check that $Path 
    includes the directory containing the desired file, and that the name of 
    the file has been spelled correctly.  *External file permissions must be 
    sufficient to permit the requested operations.



* nopasswd

    Message names:
       General::nopasswd:

    Message:
       a: b: password (field 3) missing. See installation instructions on
          how to set up your mathpass file.


    Generated when the mathpass file for your copy of Mathematica is not
    correctly formatted.



* noproj

    Message names:
       Graphics3D::noproj:
       SurfaceGraphics::noproj:

    Message:
       Mathematica is unable to make a projection matrix; check the settings
          of ViewPoint, ViewCenter, and ViewVertical.


    Generated when the options which determine projections for 
    three-dimensional graphics lead to an invalid projection.



* nopwfile

    Message names:
       General::nopwfile:

    Message:
       Password file name not found. See installation instructions on
          how to set up your mathpass file.


    Generated when a required password file for your copy of Mathematica 
    is not found.



* nord

    Message names:
       function::nord:

    Message:
       Comparison with complex number z attempted.


    Generated when complex numbers appear as arguments to Min, Max, 
    Greater, Less, and related function which make numerical 
    comparisons.  *Example: 2 I >= 3 I -- the comparison function 
    GreaterEqual (>=) is not meaningful for complex numbers.



*norep

   Message names:
      Unset::norep:

   Message:
      Assignment on tag for expr not found.


   Generated when the tag of the argument to Unset does not have a value.
   *Example: f[a] ^= 4 followed by Unset[f[a]] -- the assignment f[a] ^= 4 
   attaches a rule to a rather than f, so no assignment with tag f is found.

 

* norest

    Message names:
       Rest::norest:

    Message:
       Cannot take Rest of expression expr with length zero.


    Generated when the argument in Rest has no elements.  *Example: 
    Rest[f[ ]] -- the expression f[ ] has a length of zero.



* normal

    Message names:
       function::normal:

    Message:
       Normal expression expected at position n in expr.


    Generated when the indicated function argument is not a normal 
    expression.  *A normal expression is an expression with a head and 
    zero or more arguments.  *Example: Reverse[x] -- x is a symbol rather 
    than a normal expression; Reverse is only meaningful for normal 
    expressions.



* nosol

    Message names:
       LinearSolve::nosol:

    Message:
       Linear equation encountered which has no solution.


    Generated when LinearSolve receives a system of equations which has no 
    solution.  *Example: LinearSolve[{{1, 2}, {2, 4}}, {2, 5}] -- the 
    system of equations represented by these arguments has no solution.
 


* nosym

    Message names:
       function::nosym:

    Message:
       expr does not contain a symbol to which to attach a rule.


    Generated when no valid symbols are found in assignments involving
    certain functions which attach rules to argument symbols.  Affected 
    functions include Attributes, Context, Default, Format, MessageName 
    (symbol::tag), N, and Options. *Example: Default[x_] = 0 -- rules 
    cannot be attached to the pattern x_.



* notag

    Message names:
       Set::notag:
       Unset::notag:
       UpSet::notag:
       UpSetDelayed::notag:

    Message:
       No valid assignment tag found in expr.


    Generated when the head of the expression on the left side of an 
    assignment does not contain a symbol to which a rule can be attached.
    *Example: _[x] := f[x] -- rules cannot generally be attached to a
    pattern (such as _); this rule can be attached to x, as in x/: 
    _[x] := f[x].  *Example: _[a] = . -- no rules can be removed, since 
    _[a] does not contain a valid assignment tag.  *Example: f[_] ^= 
    f -- rules cannot be attached to the pattern argument in f[_].



* notfound

    Message names:
       function::notfound:

    Message:
       Symbol sym not found.


    Generated when the indicated function argument is not a known symbol.
    *Example: Attributes["ff"] -- a message is produced if the symbol 
    ff has not previously been entered.  *Example: ?ff[x] -- the expression 
    ff[x] is not a valid symbol name; use ?ff to get information on ff.
    *A symbol will not be found if the context of the symbol is not in 
    the list $ContextPath of available contexts.  *Note that if the name 
    of the symbol is not enclosed in double quotes (not a string), the 
    appearance of the name as an argument causes the symbol to be created 
    if it does not already exist, and this message does not then appear.
    *Example: Remove[x] followed by Context["x"] -- no context will be 
    found for the removed symbol, and since x is enclosed in double quotes, 
    the symbol is not re-created.



* notrc

    Message names:
       TraceLevel::notrc:

    Message:
       No Trace function is currently active.


    Generated if TraceLevel[ ] is used when no function is currently being 
    traced.



* noval

    Message names:
       Part::noval:

    Message:
       Symbol s in part assignment does not have an immediate value.


    Generated when the first argument to Part in a part assignment does 
    not have a value.  *Example: x[[1]] = 2 -- the assignment to x[[1]] 
    cannot be made if x does not already have a value.



* npad

    Message names:
       function::npad:

    Message:
       Value for option NumberPadding -> val should be a string or a pair
          of strings.


    Generated when the value of the NumberPadding option is not a string or 
    a pair of strings.



* nplim

    Message names:
       NProduct::nplim:

    Message:
       Limit of product expr is not a number.


    Generated when the limits in NProduct are not numerical.  *Example: 
    NProduct[k^2, {k, a, b}] -- the limits a and b on the product index 
    k are expected to evaluate to numbers.



* npnum

    Message names:
       NProduct::npnum:

    Message:
       Multiplicand expr is not numerical at point x = val.


    Generated when the first argument to NProduct is not numerical at the 
    indicated point.  The first argument to NProduct is expected to evaluate 
    to a number at all values of the product index.



* npst

    Message names:
       NProduct::npst:

    Message:
       Product step size expr is zero or not a number.


    Generated when the fourth element (step size) in an iteration 
    specification does not evaluate to a non-zero number.



* npt

    Message names:
       function::npt:

    Message:
       Value for option NumberPoint -> val is expected to be a string.


    Generated when the value of the NumberPoint option is not a string.

 

* npz

    Message names:
       NProduct::npz:

    Message:
       Some factors are one. The algorithms are not very applicable.


    Generated when factors with a value of 1 are encountered by NProduct.



* nsat

    Message names:
       ConstrainedMax::nsat:
       ConstrainedMin::nsat:

    Message:
       The specified constraints cannot be satisfied.


    Generated when ConstrainedMin or ConstrainedMax are used with 
    incompatible constraints.  *Example: ConstrainedMax[x, {x < 0, x > 5}, x] 
    -- the two constraints x < 0 and x > 5 have no simultaneous solution.
 


* nsatt

    Message names:
       ConstrainedMax::nsatt:
       ConstrainedMin::nsatt:

    Message:
       The specified constraints cannot be satisfied with tolerance tol.


    Generated when the constraints in ConstrainedMin or ConstrainedMax 
    are determined to be incompatible, using the indicated tolerance.
    *Example: ConstrainedMax[x, {x < 0, x > 5}, x, Tolerance -> .0001] 
    -- the two constraints x < 0 and x > 5 have no simultaneous solution.

 

* nsgn

    Message names:
       function::nsgn:

    Message:
       Value for option NumberSigns -> val should be a pair of strings or
          two pairs of strings.


    Generated when the value of the NumberSigns option is not a pair of 
    strings or a list containing two pairs of strings.



* nslim

    Message names:
       NSum::nslim:

    Message:
       Limit of summation expr is not a number.


    Generated when the limits of summation in NSum are not numerical.
    *Example: NSum[k^2, {k, a, b}] -- the limits a and b on the summation 
    index k are expected to evaluate to numbers.



* nsnum

    Message names:
       NSum::nsnum:

    Message:
       Summand (or its derivative) f is not numerical at point x = val.


    The first argument to NSum is expected to evaluate to a number
    at values of the summation index.



* nspr

    Message names:
       function::nspr:

    Message:
       Value for option NumberSeparator -> val should be a string or a pair
          of strings.


    Generated when the value of the NumberSeparator option is not a
    string or a pair of strings.



* nsst

    Message names:
       NSum::nsst:

    Message:
       Summation step size expr is zero or not a number.


    Generated when the fourth element (step size) in an iteration
    specification does not evaluate to a non-zero number.



* nsumz

    Message names:
       NSum::nsumz:

    Message:
       Some terms are zero. The algorithms are not very applicable.


    Generated when terms with a value of zero are encountered by NSum.



* ntcs

    Message names:
       NDSolve::ntcs:

    Message:
       Cannot solve constraint equations for initial conditions.


    Generated when NDSolve is unable to solve the equations for the 
    necessary starting conditions.



* obsc

    Message names:
       Condition::obsc:

    Message:
       Warning: Obsolete use of Condition (expr) evaluated to its first
          argument.


    Generated when Condition is used in a way which is not documented.



* obscf

    Message names:
       Condition::obscf:

    Message:
       Warning: Obsolete use of Condition (expr) evaluated to Fail.


    Generated when Condition is used in a way which is not documented.



* obsff

    Message names:
       FontForm::obsff:

    Message:
       FontForm[expr, font, size] is an obsolete use of FontForm, 
          superseded by FontForm[expr, {font, size}].

    Generated when an obsolete use of FontForm is encountered.  *In 
    Mathematica Version 2.0, the correct use of FontForm is FontForm[expr, 
    {"font", size}], where the second argument is a list indicating the name 
    and size of a font.



* obsfn

    Message names:
       function::obsfn:

    Message:
       f is an obsolete function, superseded by g.


    Generated when an obsolete function is used.  *Refer to a current 
    reference guide or the usage message for the new function or functions.



* obsopt

    Message names:
       function::obsopt:

    Message:
       opt_1 is an obsolete graphics option, superseded by opt_2.


    Generated when obsolete graphics options are used.  *Refer to a 
    current reference guide or the usage message for the new option.



* obsym

    Message names:
       $$Media::obsym:

    Message:
       $$Media is an obsolete symbol, superseded by Streams[ ].


    Generated when the obsolete symbol $$Media is used.  *Refer to a current 
    reference guide or the usage message for Streams.



* opdef

    Message names:
       Optional::opdef:

    Message:
       Default value for optional argument expr contains a pattern.


    Generated when the second argument to Optional contains patterns.
    *Pattern objects include expressions such as Blank[x] (x_), 
    Alternatives[a,b] (a|b), and related forms which are intended for 
    matching other expressions.  *A pattern Optional[p,v] is commonly 
    entered in the form p:v.  *Example: f[x_, y_:__] = {x, y} -- the 
    default value __ in the pattern y_:__ cannot itself be a pattern.

 
 
* openr

    Message names:
       General::openr:

    Message:
       expr is open for input.


    Generated by an attempt to write to a file which has been opened
    for reading.  *Example: Write[OpenRead["data"], result] -- the 
    function OpenRead opens the file "data" for reading; to write to 
    "data", first close the file, then open it using OpenWrite["data"] or
    OpenAppend["data"].



* openw

    Message names:
       General::openw:

    Message:
       expr is open for output.


    Generated by an attempt to read from a file which has been opened
    for writing.  *Example: Read[OpenWrite["data"], Expression] -- the 
    function OpenWrite opens the file "data" for writing; to read from
    "data", it should be opened for reading using OpenRead["data"].



* openx

    Message names:
       function::openx:

    Message:
       file is not open.


    Generated when an operation is requested on a file or stream which has 
    not been opened.  *Example: Read["datafile", Expression] -- an error 
    will occur if the file "datafile" has not previously been opened; the 
    file can be opened using OpenRead["datafile"].



* opmix

    Message names:
       Options::opmix:

    Message:
       Cannot mix streams and non-streams in expr.


    Generated when the first argument to Options contains both stream 
    objects (InputStream[... ], OutputStream[... ]) and other expressions.



* opset

    Message names:
       function::opset:

    Message:
       Option opt is not set in expr.


    Generated when the indicated option has not been given a value.
    *Many functions require all options to have values.  *Example: 
    Unprotect[Inverse]; Unset[Options[Inverse]] followed by Inverse[{{a}}] 
    -- the options of the Inverse function are required to have values.
 


* opstl

    Message names:
       function::opstl:

    Message:
       Value of option opt -> val should be a string or a list of strings.


    Generated when the indicated option is not a string or list of strings.

 

* opsym

    Message names:
       Options::opsym:

    Message:
       Second argument in expr should be a symbol or a list of symbols.


    Generated when the second argument to Options is not a symbol or a 
    list of symbols.



* optb

    Message names:
       General::optb:

    Message:
       Optional object expr in pattern is not a single blank.


    Generated when the head of the first argument to Optional is
    not Blank or Pattern.  *The special form p:v is commonly used to 
    enter Optional[s, v].  *Example: f[Optional[__, b]] := b -- the 
    argument __ is not a single blank.
 


* optf

    Message names:
       SetOptions::optf:

    Message:
       sym has incorrectly formed options expr.


    Generated during evaluation of SetOptions[sym, ... ] when
    Options[sym] is not a list.  *Options[sym] is expected to return an 
    expression with head List.  *This message should only appear if 
    Options or a related function has been redefined, since the built-in 
    Options function normally returns a list.



* optnf

    Message names:
       Options::optnf:
       SetOptions::optnf:

    Message:
       opt is not a known option for expr.


    Generated when an option name in the second argument to Options or
    SetOptions is not found among the options of the first argument.
    *This error occurs if any of the opt_i in SetOptions[expr, opt_1 -> 
    val_1, opt_2 -> val_2, ... ] are not found among the options returned 
    by Options[expr].  *Example: SetOptions[Plot, Label -> "graph"] -- Label
    is not normally among the options of Plot; check the current options 
    and the spelling of the option names.  *The known options for expr 
    can be listed using Options[symbol].  *SetOptions can only change 
    existing options, and cannot add or remove options. *Options can be 
    added or removed by directly assigning values to the option list, 
    as in Options[f] = {Start -> 0}.



* optrs

    Message names:
       function::optrs:

    Message:
       Option specification opt in expr is not a rule for a symbol.


    Generated when the indicated expression is expected to have the form 
    of an option.  A valid option is a rule in which the right-hand side 
    is a symbol.



* opttf

    Message names:
       function::opttf:

    Message:
       Value of option opt -> val should be True or False.


    Generated when the value of the indicated option is expected to be 
    either True or False.



* optx

    Message names:
       function::optx:

    Message:
       Unknown option opt in expr.


    Generated when an option passed to a function cannot be found among 
    the known options for that function.  *Example: SingularValues[matrix, 
    Toleranc -> .2] --the name of the Tolerance option has been misspelled.

 

* ovfl

    Message names:
       General::ovfl:

    Message:
       Overflow occurred in computation.


    Generated by overflow during arithmetic involving real numbers.
    *Example: 10.^10^10 -- this number is too large to be represented
    in Mathematica.



* p3mat

    Message names:
       Plot3Matrix::p3mat:

    Message:
       Value of option Plot3Matrix -> expr is not a 4 x 4 numerical matrix.


    The value of the Plot3Matrix option is expected to be Automatic or a 
    4 X 4  numerical matrix describing a perspective transformation.



* p3wrn

    Message names:
       Plot3Matrix::p3wrn:

    Message:
       Warning: Plot3Matrix is undocumented; see ViewCenter and ViewVertical.


    Generated when the Plot3Matrix option is used.  The Plot3Matrix option 
    is not documented and may not be fully supported.



* pagew

    Message names:
       ToString::pagew:

    Message:
       Value of option PageWidth -> val is expected to be a positive integer
          or Infinity.


    Generated when the value of the PageWidth option in ToString is not a 
    positive integer or Infinity.



* par

    Message names:
       function::par:

    Message:
       Inappropriate parameter: opt -> val.


    Generated when the value of the indicated option is not valid.  *Example: 
    FindMinimum[x, {x,1}, MaxIterations -> x] -- the value of the 
    MaxIterations option in FindMinimum is expected to be a positive 
    machine-size integer.  *Consult the documentation for a description of 
    valid values for the option.



* part

    Message names:
       Delete::part:
       FlattenAt::part:
       MapAt::part:
       Part::part:
       ReplaceHeldPart::part:
       ReplacePart::part:

    Message:
       Part spec of expr does not exist.


    Generated when an operation is requested at a non-existent position
    in an expression.  *Example: FlattenAt[{a, b, c}, {1, 1}] -- the 
    expression {a, b, c} does not have a subexpression at position {1, 1}.



* partd

    Message names:
       Part::partd:

    Message:
       Part specification spec is longer than depth of object.


    Generated when a part specification requests a part at a depth which
    exceeds the depth of the object.  *Example: {a, b, c}[[1, 2]] or 
    Part[{a, b, c}, 1, 2] -- this input specifies an element at depth 2 
    which exceeds the depth of {a, b, c}.



* partw

    Message names:
       Part::partw:

    Message:
       Part spec of expr does not exist.


    Generated when a requested part of an expression is beyond the length
    of the expression.  *Example: {1, 2, 3}[[4]] -- the list {1, 2, 3} does 
    not have a fourth element.



* password

    Message names:
       General::password:

    Message:
       a: b: c See installation instructions on how to set up your
          mathpass file.


    Generated when the password file necessary to run Mathematica on your 
    machine is not correctly formatted.



* path

    Message names:
       Get::path:

    Message:
       expr in $Path is not a string.


    Generated when Get encounters an entry of $Path which is not a string.
    *$Path is expected to be a string containing a directory name, or a 
    list of such strings (enclosed in double quotes).  *Example: $Path = 
    {dir} followed by Get["file"] -- the element dir in $Path is expected 
    to be a string containing the name of a directory.

 

* patm

    Message names:
       Pattern::patm:

    Message:
       Too many (n) optional arguments required in expr.


    Generated when the left-hand side of a rule contains a large number of
    optional arguments.  *The special form x_. is typically used to enter 
    optional function arguments in a rule.  *This error typically appears if 
    a function has more than 13 optional arguments.



* patop

    Message names:
       General::patop:

    Message:
       Pattern expr contains inappropriate optional object.


    Generated when an optional pattern appears at various positions within
    another pattern expression.  *Example: f[x:(_.)] := x^2 -- the optional 
    pattern _. cannot be used as the second argument in Pattern.  *An 
    optional pattern (_.) may not be used as the first argument in 
    PatternTest (p?test), Condition (p /; cond), Repeated (p..), 
    RepeatedNull (p...), or Optional (p:#v]), or as the second argument in 
    Pattern.



* patsym

    Message names:
       Pattern::patsym:

    Message:
       First element in pattern expr is not a symbol.


    The first element in Pattern is the name of the pattern, and is 
    expected to be a symbol.  *The special form s:obj can be used to enter 
    the expression Pattern[s, obj].  In typical cases the colon (:) may 
    be omitted, as in x_.  *Example: {b_ -> 5} /. b -> f[a] -- substitution 
    for b results in Pattern[f[a], _], in which the first argument is not 
    a symbol.



* patv

    Message names:
       Pattern::patv:

    Message:
       Name expr used for both fixed and variable length patterns.


    The same name cannot be used for both fixed and variable length 
    patterns in a single rule.  *Example: f[x_, x__] := {x, y} -- the 
    patterns x_ and x__ can match different numbers of expressions; use 
    a different name for one of the patterns, as in f[x_, y__] := {x, y}.



* pcolor

    Message names:
       ParametricPlot3D::pcolor:
       Plot3D::pcolor:

    Message:
       The shading function has produced colors of different types.


    Generated when the shading specification in the first argument to
    ParametricPlot3D or Plot3D leads to colors of different types.
    *If the first argument to ParametricPlot3D is a list with four
    elements, the fourth element is used as a shading specification.
    *The shading specification must evaluate to a color of the same type
    (CMYKColor, GrayLevel, Hue, or RGBColor) for each element in the plot.



* pde

    Message names:
       DSolve::pde:
       NDSolve::pde:

    Message:
       Partial differential equation encountered.


    Generated when more than one variable is specified in the third
    argument to DSolve or NDSolve.  *Example: DSolve[f'[x] == k f[x], 
    f[x], {k,x}] -- the parameter k need not be included in the list of 
    variables; only the differentiation variable should appear, as in
    DSolve[f'[x] == k f[x], f[x], x].  *The built-in rules for DSolve 
    are designed for solving ordinary differential equations.



* pdep

    Message names:
       Partition::pdep:

    Message:
       Depth n requested in object with dimensions dims.


    Generated when the second argument to Partition is a list with length 
    greater than the depth of the first argument.  *When the second argument 
    to Partition is a list, the elements specify partitioning of each 
    dimension.  *Example: Partition[{{a, b}, c}, {1, 2}] -- the depth of
    {{a, b}, c} is 1, which is less than the length of the partitioning 
    specification {1, 2}.



* perm

    Message names:
       Transpose::perm:

    Message:
       expr is not a permutation.


    The second argument to Transpose must be a permutation of consecutive 
    integers starting with 1.  *Example: Transpose[Array[a, {2, 2, 2}], 
    {2, 3}] -- the argument {2, 3} is not a permutation of the integers 1, 2,
    3; to transpose the second and third dimensions, use the permutation
    {1, 3, 2}.



* pfnum

    Message names:
       Play::pfnum:

    Message:
       Function f (after normalization) never evaluates to a machine-size
          real number.


    Generated when the first argument to Play does not evaluate to a 
    machine-size real number at any of the sample points.



* playr

    Message names:
       ListPlay::playr:
       Play::playr:

    Message:
       Value of option PlayRange -> val is not a list of two machine-size
          real numbers.


    Generated when the value of the PlayRange option in Play or ListPlay is 
    not a list, or does not contain two machine-size real numbers.



* pldiv

    Message names:
       ParametricPlot::pldiv:
       Plot::pldiv:

    Message:
       Value of option PlotDivision -> val is not a number greater than 1.


    Generated when the PlotDivision option is set to a non-numerical value, 
    or to a number less than 1.



* plld

    Message names:
       ContourPlot::plld:
       DensityPlot::plld:
       ParametricPlot::plld:
       ParametricPlot3D::plld:
       Plot::plld:
       Plot3D::plld:

    Message:
       Limits for x in lims must have distinct numerical values.


    Generated when the mininum and maximum values in the limit specification
    in a plot are not distinct.  *This message can also appear if the 
    difference between the limits is smaller than the smallest standard 
    number which can be represented on your computer.

 

* pllim

    Message names:
       ContourPlot::pllim:
       DensityPlot::pllim:
       ParametricPlot::pllim:
       ParametricPlot3D::pllim:
       Play::pllim:
       Plot::pllim:
       Plot3D::pllim:

    Message:
       Limit specification expr is not of the form {x, xmin, xmax}.


    The limits on a plotting variable x are expected to be given in the
    form x, xmin, xmax.  Example: Plot3D[x, y, {x, 0, 1}] -- both the 
    second and third arguments in Plot3D should be lists with three 
    elements.



* plln

    Message names:
       function::plln:

    Message:
       Limiting value x_0 in lims is not a machine-size real number.


    Generated when either xmin or xmax in the limit specification
    {x, xmin, xmax} does not evaluate to a machine-size real number.
    *Example: Plot[Exp[x], {x, a, b}] -- the symbols a and b are 
    expected to be real numbers.



* plls

    Message names:
       ParametricPlot3D::plls:

    Message:
       Step size s in expr is not a machine-size real number.


    Generated when the step size specified in the indicated iterator 
    argument from ParametricPlot3D is not a machine-size real number.



* pllz

    Message names:
       ParametricPlot3D::pllz:

    Message:
       Step size s in expr must be non-zero.


    Generated when the step size specified in the indicated iterator
    argument from ParametricPlot3D is zero.



* plnc

    Message names:
       Plot3D::plnc:

    Message:
       expr is neither a machine-size real number at x=val nor a list of a
          real number and a valid color directive.


    Generated when the first argument in Plot3D does not have the indicated
    form.  *The first argument in Plot3D is expected to be a real number
    specifying the height of the surface or a list containing a real number
    and a color directive specifying the height and the shading of the 
    surface.



* plnr

    Message names:
       ContourPlot::plnr:
       DensityPlot::plnr:
       Plot::plnr:

    Message:
       expr is not a machine-size real number at x = val.  
       
       
    Generated when the function to be plotted is not a real number at the
    indicated point.  *Example: Plot[Sin[a x], {x, 0, 10}] -- the function 
    Sin[a x] is not generally a real number unless both a and x are numbers.
 


* ploss

    Message names:
       NIntegrate::ploss:

    Message:
       Numerical integration stopping due to loss of precision. Achieved
          neither the requested PrecisionGoal nor AccuracyGoal; suspect one
          of the following: highly oscillatory integrand or the true value
          of the integral is 0.


    Generated when the requested precision or accuracy cannot be achieved
    due to numerical roundoff.  *Example: NIntegrate[Sin[x], {x, 0, 2 Pi}] 
    -- the exact value of the integral is zero, which results from 
    cancellation between non-zero intermediate results.



* plotr

    Message names:
       PlotRegion::plotr:

    Message:
       Value of option PlotRegion -> expr is not two pairs of real numbers
          in the form {{xmin, xmax}, {ymin, ymax}}.


    Generated when the value of the PlotRegion option is not Automatic or 
    a list of two pairs of numbers.

 

* plx

    Message names:
       Play::plx:

    Message:
       First argument expr does not contain any functions to play.


    Generated when the first argument to Play is a list with no elements.



* pmod

    Message names:
       PowerMod::pmod:

    Message:
       All three arguments in expr must be integers.


    Generated when any of the arguments in PowerMod is not an integer.

 

* pmsr

    Message names:
       ContourGraphics::pmsr:
       DensityGraphics::pmsr:
       SurfaceGraphics::pmsr:

    Message:
       PlotRange p is so much smaller than MeshRange m that there is 
	  nothing left to plot.


    Generated when the value of the PlotRange options is such that no 
    points in the original mesh are included.



* poly

    Message names:
       General::poly:

    Message:
       expr is not a polynomial.


    Generated when the indicated expression is expected to be a polynomial.

 

* polym

    Message names:
       PolynomialMod::polym:

    Message:
       Modulus m is not a positive integer.


    Generated when the modulus derived from the arguments to PolynomialMod 
    is not a positive integer.

 

* polyx

    Message names:
       function::polyx:

    Message:
       expr is not a polynomial with exact coefficients.


    Generated when one or more of the coefficients in the indicated 
    expression is inexact.



* ppcom

    Message names:
       ParametricPlot::ppcom:
       ParametricPlot3D::ppcom:

    Message:
       Function f cannot be compiled; plotting will proceed with the
          uncompiled function.


    Generated when the function to be plotted cannot be compiled.  *If 
    the value of the Compiled option is True, a function to be plotted 
    is normally compiled to speed up numerical evaluation.  Uncompiled 
    evaluation is used if compilation fails.  *Automatic compilation by 
    plotting functions can be turned off using the option Compiled -> False.
    *The Compile function cannot handle certain types of expressions.  
    In plots, the most common uncompilable expression is a list.  *Refer 
    to the documentation for Compile for details regarding functions that 
    can be compiled.



* ppfun

    Message names:
       ParametricPlot3D::ppfun:

    Message:
       Argument expr is not a list with three or four elements.


    Generated when the first argument in ParametricPlot3D is not a list, 
    or is a list with zero length.
 


* pplr

    Message names:
       ParametricPlot3D::pplr:

    Message:
       expr is not a list starting with three real numbers at x = val.


    Generated when the first argument to ParametricPlot3D does not evaluate 
    to a list of the form {x, y, z} or {x, y, z, color} at the indicated 
    point, where x, y, and z are real numbers.  *Example: ParametricPlot3D[
    {x, y, z}, {x, 0, 1}, {y, 0, 1}] -- the first argument should be a 
    function of the variables x and y.



* ppta

    Message names:
       ParametricPlot3D::ppta:

    Message:
       Value of option PlotPoints -> val is not Automatic, an integer >= 2,
          or a list of two of these values.


    The value of the PlotPoints option in ParametricPlot3D is expected to 
    be Automatic, an integer greater than or equal to 2, or a list of two 
    of these values.

 

* pptr

    Message names:
       ParametricPlot::pptr:

    Message:
       expr does not evaluate to a pair of real numbers at x = val.


    Generated when the point specification in ParametricPlot does not 
    evaluate to a pair of real numbers.  *Example: ParametricPlot[{Sin[t]}, 
    {t, 0, 10}] -- the first argument to ParametricPlot should evaluate to a
    pair of real numbers representing the coordinates of a point; try 
    ParametricPlot[{Sin[t], t}, {t, 0, 10}].



* ppts

    Message names:
       ParametricPlot::ppts:
       ParametricPlot3D::ppts:
       Plot::ppts:

    Message:
       Value of option PlotPoints -> val is not an integer >= 2.


    Generated when the value of the PlotPoints option is not an integer or 
    is less than 2.

 

* pptt

    Message names:
       ContourPlot::pptt:
       DensityPlot::pptt:
       Plot3D::pptt:

    Message:
       Value of option PlotPoints -> val is not an integer >= 2 or a list
          of two such integers.


    Generated when the value of the PlotPoints options is neither an integer 
    greater than 2 nor a list of two such integers.

 

* ppx

    Message names:
       ParametricPlot3D::ppx:

    Message:
       Graphics3D object calculated in ParametricPlot3D is empty.


    Generated when the list of graphics primitives generated by 
    ParametricPlot3D has no elements.  *This error typically arises 
    when the arguments to ParametricPlot3D do not have the correct form.

 

* precd

    Message names:
       HorizontalForm::precd:
       VerticalForm::precd:

    Message:
       Precedence list expr is not of the form {head, prec, assoc, ...}.


    Generated when an invalid argument to HorizontalForm or VerticalForm 
    is encountered during output formatting.



* precg

    Message names:
       NDSolve::precg:
       NIntegrate::precg:
       NProduct::precg:
       NSum::precg:

    Message:
       Value of option PrecisionGoal -> val is not Automatic, Infinity, or a
          positive machine-size integer.


    Generated when the value of the PrecisionGoal option is not Automatic, 
    Infinity, or a positive machine-size integer.



* precr

    Message names:
       NDSolve::precr:

    Message:
       Requested PrecisionGoal n_1 is larger than WorkingPrecision;
          PrecisionGoal reduced to n_2.


    Generated when the requested PrecisionGoal is larger than the value
    of the WorkingPrecision option.  *The value of WorkingPrecision must be 
    at least as large as the PrecisionGoal, and typically should be several 
    digits larger to allow for roundoff errors.



* precw

    Message names:
       function::precw:

    Message:
       Warning: The precision of the argument function (f) is less than
          WorkingPrecision (p).


    Generated when the value of the WorkingPrecision option is larger than 
    the precision of the argument function.  *Example: NIntegrate[3.4 x, 
    {x, 0, 1}, WorkingPrecision -> 25] -- the precision of this integrand 
    will be the internal precision used by your computer (typically 16 to 
    19 digits), which is less than the requested working precision.  *This 
    message warns that high-precision arithmetic is being used with 
    low-precision operands, and that some digits in the answer may therefore 
    be incorrect.  *In most cases an attempt is made to raise the precision 
    of the operands using SetPrecision, but this is not always reliable.



* priml

    Message names:
       Factor::priml:

    Message:
       Prime n is too large for this implementation.


    Generated when a large prime number is encountered by Factor,
    or when the value of the Modulus option is too large to use in 
    polynomial factorization on your computer.  *Example: Factor
    [(x - 123)^14, Modulus -> 1299709] -- this setting of Modulus is 
    too large for most computers.



* primm

    Message names:
       function::primm:

    Message:
       Tried n primes, algorithm failed.


    Generated by internal algorithms which search lists of prime numbers.

 

* prims

    Message names:
       function::prims:

    Message:
       Prime p is too small, algorithm failed.


    Generated by internal algorithms which search sets of prime numbers and 
    fail when a small prime is encountered.



* privv

    Message names:
       function::privv:

    Message:
       Privilege violation during expr.


    Generated when a privilege violation has occurred during manipulation 
    of external files or directories.  *This message is typically a response 
    to a corresponding message generated by the operating system of your 
    computer.



* prng

    Message names:
       PlotRange::prng:

    Message:
       Value of option PlotRange -> val is not All, Automatic, or an 
          appropriate list of range specifications.

    The PlotRange option in plotting functions and graphics expressions
    is expected to be All, Automatic, a list of two numbers, or a list of 
    range specifications for each dimension.  *Example: Plot[Sin[x], 
    {x, 0, 9}, PlotRange -> 1] -- to produce a plot with a specified range, 
    the value of the PlotRange option should be a list of two numbers, as in
    Plot[Sin[x], {x, 0, 9}, PlotRange -> {0, 1}].

 

* proclimit

    Message names:
       General::proclimit:

    Message:
       a: b: Already running n Mathematica processes; no more are allowed
          by this license.


    Generated when the process limit (the number of simultaneous users) for
    your copy of Mathematica is exceeded.



* prstr

    Message names:
       $PreRead::prstr:

    Message:
       $PreRead["input"] results in expr, which is not a string.


    Generated when the result of applying $PreRead to the input line is not 
    a string.



* psl

    Message names:
       Delete::psl:
       FlattenAt::psl:
       Insert::psl:
       MapAt::psl:
       ReplaceHeldPart::psl:
       ReplacePart::psl:

   Message:
       Position specification spec in expr is not an integer or a list
          of integers.


   Generated when an invalid position specification is used in the 
   indicated function.  *A position specification should be an integer 
   or a list of integers.  *Example: Delete[{a, b, c}, x] -- the second 
   argument in Delete is expected to evaluate to a valid position 
   specification.



* pspec

    Message names:
       Part::pspec:

    Message:
       Part specification expr is neither an integer nor a list of non-zero
          integers.


    Generated when the second or subsequent argument to Part is not an 
    integer or a list of non-zero integers.  *Example: a[[b]] -- the symbol 
    b is a part specification and is expected to evaluate to an integer.

 

* pssl

    Message names:
       Protect::pssl:

    Message:
       expr is not a string, symbol, or list of strings and symbols.


    Arguments to Protect are expected to be symbol names, strings 
    containing symbol names, or lists of symbols and strings.  *Example: 
    Protect[f[x_]] -- the expression f[x_] is not a symbol; to protect 
    rules attached to the symbol f, use Protect[f].



* psvf

    Message names:
       Graphics3D::psvf:

    Message:
       Function value at x = xval, y = yval was sent to infinity by
          perspective transformation.


    Generated when the perspective transformation needed to display
    a surface sends a portion of the surface to infinity.



* ptest

    Message names:
       PatternTest::ptest:

    Message:
       No patterns found in test expr.


    The first part of p?test is expected to include a pattern object, such 
    as Blank (_).  *The special form p?test is commonly used to enter 
    PatternTest[p, test].  *Example: f[x?IntegerQ] = f[x/2] -- the symbol 
    x is not by itself a pattern object; try replacing x with x_, as in 
    f[x_?IntegerQ] = f[x/2].



* pttl

    Message names:
       Partition::pttl:

    Message:
       Partition arguments e_1 and e_2 must be the same length (since both 
          are lists).


    If the second and third arguments to Partition are lists, then they 
    must have the same length.  *The second argument to Partition specifies 
    partitioning in each dimension, and the third argument specifies offset 
    in the corresponding dimensions.
 


* pvec

    Message names:
       function::pvec:

    Message:
       Unable to find principal vectors for eigenvalue expr.


    Generated when the principal vectors for the subspace corresponding
    to the indicated eigenvalue could not be computed.



* pwmathid

    Message names:
       General::pwmathid:

    Message:
       a: b: Warning: Correct machine name but incorrect mathid (should be 
	  id). See installation instructions on how to set up your mathpass 
	  file.


    Generated when the mathpass file for your copy of Mathematica does 
    not contain the correct mathid.



* pwname

    Message names:
       General::pwname:

    Message:
       a: b: Warning: Correct mathid but incorrect machine name (should 
       be name). See installation instructions on how to set up your 
       mathpass file.


    Generated when the mathpass file for your copy of Mathematica does
    not contain the correct machine name.



* pwnolic

    Message names:
       General::pwnolic:

    Message:
       id: License refused from server name.


    Generated when a request to a license server fails.



* pwpath

    Message names:
       General::pwpath:

    Message:
       -pwpath "path" is not a List of directory names.


    Generated when the -pwpath command-line option is not a list of 
    directory names.



* qrf

    Message names:
       QRDecomposition::qrf:

    Message:
       QRDecomposition has received a matrix with infinite precision.


    Generated when QRDecomposition is used with a symbolic or exact 
    matrix.  *The algorithm used by QRDecomposition is normally only 
    meaningful for inexact numerical matrices.



* qrn

    Message names:
       QRDecomposition::qrn:

    Message:
       QRDecomposition has received a matrix with non-numerical elements.


    Generated when the argument to QRDecomposition is a matrix with 
    non-numerical elements.  *The algorithm used by QRDecomposition is 
    normally only meaningful for inexact numerical matrices.



* radius

    Message names:
       Disk::radius:

    Message:
       Radius expr is not a positive number or a pair of positive numbers.


    Generated when the second argument (radius specification) in Disk is 
    not a positive number or a pair of positive numbers.  *The second 
    argument to Disk specifies the radius of the disk, or the radii of 
    the ellipse.



* randn

    Message names:
       Random::randn:

    Message:
       Range specification r in expr is not a number or pair of numbers.


    The second argument to Random is expected to be either a number or a 
    pair of numbers.



* randt

    Message names:
       Random::randt:

    Message:
       Type specification spec in expr should be Real, Integer, or Complex.


    Generated when the first argument to Random is not Real, Integer, or 
    Complex.



* range

    Message names:
       Range::range:

    Message:
       Range specification in expr is not an integer.


    Genarated when at least one of the arguments to Range is not an integer, 
    or cannot be represented as a standard integer on your computer.
    *Example: Range[1, 2, a] -- all of the arguments to Range are expected 
    to be integers.



* rawvar

    Message names:
       function::rawvar:

    Message:
       Parameter x in vars is a raw expression and cannot be used as
          a variable.


    Generated by an attempt to use a raw expression as a plotting variable.
    *A raw expression is an expression which is not a symbol and has 
    no arguments.  The most common raw expressions are numbers and strings.
    *Plotting functions must be able to assign values to the plotting 
    variable, and values may not be assigned to raw expressions.  *Example: 
    Plot[Sin[x], {4, 5, 6}] -- the first element in the limit specification 
    {1, 2, 3} is used as the plotting variable.



* rbase

    Message names:
       MantissaExponent::rbase:
       RealDigits::rbase:

    Message:
       Base n is not a real number greater than 1.


    Generated when the second argument to MantissaExponent or RealDigits 
    is non-numerical, or is less than or equal to 1.  *Example: 
    RealDigits[105.61, b] -- the symbol b is expected to evaluate to a 
    number greater than 1.



* rdigs

    Message names:
       RealDigits::rdigs:

    Message:
       The requested list of digits is too long to evaluate.


    Generated when the number of digits to be computed is larger than
    the largest normal integer on your computer.  *Example: 
    RealDigits[123.4, 1.000000001] -- when the base is close to 1, a 
    very large number of digits may be required to represent the number.



* readf

    Message names:
       Read::readf:
       ReadList::readf:
       Skip::readf:

    Message:
       expr is not a valid format specification.


    Generated when the indicated expression is expected to be a format
    specification.  *Valid format specifications include Byte, Character,
    Expression, Number, Real, Record, String, and Word.



* readn

    Message names:
       Read::readn:
       ReadList::readn:
       Skip::readn:

    Message:
       Syntax error reading a real number from file.


    Generated when a syntax error is encountered while attempting to read
    a number from the indicated file.  *Numbers are read if Number or Real 
    is used as a formatting argument in Read, ReadList, or Skip.



* readp

    Message names:
       General::readp:

    Message:
       Symbol sym is read protected.


    The rules attached to a symbol with attribute ReadProtected
    cannot be printed.  *The functions DefaultValues, DownValues, 
    FormatValues, NValues, OwnValues, SubValues, UpValues, and Messages, 
    which normally return the rules attached to a symbol, cannot print 
    rules attached to a read-protected symbol.  *Example: Attributes[f] = 
    ReadProtected followed by Messages[f] --the function Messages[f] 
    leads to this error since f has attribute ReadProtected.



* readt

    Message names:
       Read::readt:
       ReadList::readt:
       Skip::readt:

    Message:
       Syntax error reading expr from file.


    Generated when a syntax error is encountered while attempting to read
    an expression from the indicated file.  *An expression is read if 
    Expression is used as a formatting argument in Read, ReadList, or Skip.
 


* readx

    Message names:
       Read::readx:
       ReadList::readx:
       Skip::readx:

    Message:
       expr reads no entries.


    Generated when a format specification (second argument to Read,
    ReadList, or Skip) does not read any entries.



* realp

    Message names:
       Graphics::realp:

    Message:
       Argument in expr is not a positive real number.


    Generated when various graphics primitives receive arguments which are
    not real numbers.  *Example: Plot[Sin[x], {x, 0, 9},  PlotStyle -> 
    AbsoluteThickness[{.1}]] -- the argument .1 in PointSize is expected 
    to be a number rather than a list.

 

* realu

    Message names:
       Graphics::realu:

    Message:
       Argument in expr is not a real number between 0 and 1.


    Generated when the indicated expression in a graphics primitive is
    expected to be a real number between 0 and 1.  *Example: 
    ListPlot[{1, 2, 3, 2}, PlotStyle -> PointSize[1.4]] -- the argument
    (1.4) to PointSize is expected to be a fraction of the linear 
    dimension of the plot.



* realx

    Message names:
       MantissaExponent::realx:
       RealDigits::realx:
       $NumberBits::realx:

    Message:
       expr is not an inexact real number.


    Generated when the indicated expression is expected to be an inexact
    real number.  *An inexact real number is typically a number with a 
    decimal point, such as 2.3, as opposed to an exact number, such as 
    23/10.
 


* reclim

    Message names:
       $RecursionLimit::reclim:

    Message:
       Recursion depth of n exceeded.


    Generated when the number of recursive evaluations of a single 
    expression exceeds $RecursionLimit.  *Example: f = f[x] -- the result 
    f[x] of the initial assignment evaluates to f[x][x], which in turn 
    evaluates to f[x][x][x], and so forth, indefinitely.  *$RecursionLimit 
    can be set to a larger value (or Infinity) if needed.



* rect

    Message names:
       Dot::rect:

    Message:
       Non-rectangular tensor encountered.


    Generated when an argument to Dot is not a rectangular tensor.
    *Example: {a, {b}} . {x, x} -- the expression {a, {b}} is not 
    rectangular, since the arguments are not both lists.  *A rectangular 
    tensor is a tensor in which all entries at a given depth have the 
    same length.



* redev

    Message names:
       RenameDirectory::redev:
       RenameFile::redev:

    Message:
       Cannot rename to a different physical device; file_1 will copied 
       to file_2, and the original will be deleted.


    Generated when the new file or directory name in RenameDirectory or
    RenameFile is not on the same physical device as the original.



* regex

    Message names:
       FindMinimum::regex:
       FindRoot::regex:

    Message:
       Reached the point x which is outside the region reg.


    Generated when the algorithm has reached a point outside the requested 
    search region.  *Example: FindMinimum[(x - 2)^2, {x, 0, 2, 5}] -- the 
    starting point is outside the search region, since the specification 
    {x, 0, 2, 5} indicates a starting point of x=0 and a search region
    of 2 < x < 5.



* relex

    Message names:
       Remove::relex:

    Message:
       Cannot remove lexical symbol sym except automatically (when expr
          is removed).


    Generated when Remove is used with a symbol which can only be removed 
    by the system.

 

* remal

    Message names:
       Remove::remal:

    Message:
       Symbol sym already removed.


    Generated when the same symbol appears more than once in a list of
    symbols to be removed.  *Example: Remove[x, b, c, x] -- when the symbol 
    x is encountered the second time, it has already been removed.

 

* renfd

    Message names:
       RenameFile::renfd:

    Message:
       Cannot rename a file into a directory.


    Generated by a request to change a file into a directory.



* rep

    Message names:
       Replace::rep:
       SetOptions::rep:

    Message:
       expr is not a valid replacement rule.


    Generated when the indicated expression is expected to be a replacement 
    rule.  *Replacements are indicated using lhs -> rhs, lhs :> rhs, 
    Rule[lhs, rhs], RuleDelayed[lhs, rhs], or a list of such rules.



* reps

    Message names:
       Replace::reps:
       ReplaceAll::reps:
       ReplaceRepeated::reps:

    Message:
       expr is neither a list of replacement rules nor a valid dispatch
          table, and so cannot be used for replacing.


    Generated when the second argument to Replace, ReplaceAll, or 
    ReplaceRepeated is not a replacement rule or a list of replacement
    rules.



* rhs

    Message names:
       Rule::rhs:
       RuleDelayed::rhs:

    Message:
       Warning: Pattern p appears on the right-hand side of rule r.


    Generated when a pattern object is found on the right-hand side
    of a rule or assignment.  *Example: f[x_] := x Sin[x_] -- the pattern 
    x_ should not appear as an argument on the right-hand side of this 
    assignment.
 


* rmix

    Message names:
       Replace::rmix:
       ReplaceAll::rmix:
       ReplaceRepeated::rmix:

    Message:
       Elements of expr are a mixture of lists and non-lists.


    Generated when the second argument to ReplaceAll (the rules argument 
    in expr /. rules is a list containing both lists and non-lists.  
    *Example: f[a, b, c] /. {a -> 5, {b -> 6}} -- the rule argument 
    {a -> 5, {b -> 6}} should be either a list of rules or a list of lists; 
    try f[a, b, c] /. {a -> 5, b -> 6} or f[a, b, c] /. {{a -> 5}, {b -> 6}}.

 

* rmlck

    Message names:
       Remove::rmlck:

    Message:
       Symbol s is Locked and cannot be removed.


    Symbols associated with attribute Locked cannot be removed.  
    *Example: Attributes[f] = Locked followed by Remove[f] --the symbol 
    f cannot be removed once it is locked.



* rmptc

    Message names:
       Remove::rmptc:

    Message:
       Symbol s is Protected and cannot be removed.


    Symbols with attribute Protected cannot be removed.  *Example: 
    Attributes[f] = Protected followed by Remove[f] --the symbol f 
    must be unprotected before it can be removed.



* rnderr

    Message names:
       NIntegrate::rnderr:

    Message:
       Inexact arithmetic has caused expr to take the value val where the
          integrand is singular.


    Generated when numerical roundoff error near the indicated point causes
    the integrand to be evaluated at a singularity.  *Example:  
    NIntegrate[1/Sqrt[Pi - x], {x, 0, Pi}] -- in trying to resolve the 
    singularity, the algorithm tries to evaluate the integrand very close 
    to the singularity, where roundoff causes the numbers to be exactly at 
    the (approximate) singularity.



* rotate

    Message names:
       RotateLeft::rotate:
       RotateRight::rotate:

    Message:
       Cannot rotate non-normal expression expr.


    RotateLeft and RotateRight can only be used with normal expressions.
    *If the second argument is a list, the elements specify rotation of 
    each dimension.  *A normal expression is an expression with a head 
    and zero or more arguments.  *Example: RotateLeft[{1, 2}, {1, 1}] -- 
    the subexpressions 1 and 2 are not normal expressions and cannot be 
    rotated.



* rrlim

    Message names:
       ReplaceRepeated::rrlim:

    Message:
       Exiting after expr scanned n times.


    Generated when a replacement rule has been applied a large number of 
    times (typically 65535).  *This is one of several possible exits 
    from infinite loops and infinite recursion.  *Example: a //. {a -> b, 
    b -> a} -- these rules ``undo'' each other, and can be applied 
    indefinitely.



* rscd

    Message names:
       Raster::rscd:
       RasterArray::rscd:

    Message:
       Color col is different from previous color.


    Generated when the color or gray-level specifications in Raster or
    RasterArray are not all of the same type.  *All color or gray-level 
    specifications in the first argument of RasterArray must be of the 
    same type (GrayLevel, CMYKColor, HSBColor, or RGBColor).  *In Raster, 
    applying the value of the ColorFunction option to elements from the 
    first argument must always result in a color or gray-level 
    specification of the same type.



* rscf

    Message names:
       Raster::rscf:

    Message:
       Result expr obtained by applying the value of the ColorFunction
          option to col is not a valid color or gray-level directive.


    Generated when the value of the ColorFunction option in Raster leads 
    to an expression which is not a valid color or gray-level directive.  
    The value of the ColorFunction option is applied to each of the cell 
    values in the first argument of Raster.



* rscol

    Message names:
       RasterArray::rscol:

    Message:
       Expression expr at position pos in first argument of g is not a valid
          color or gray-level directive.


    Generated when an element in the first argument of the indicated graphics
    primitive is not a valid color or gray-level directive.



* rslim

    Message names:
       Raster::rslim:

    Message:
       Third argument expr to g is not a list of two distinct real numbers.


    Generated when the third argument to the indicated graphics primitive
    is not a list containing two distinct real numbers.  *Example:
    Show[Graphics[Raster[{{1, 2, 3}, {3, 2, 1}}, {{0, 0}, {1, 1}}, 
    {min, max}]]] -- the argument {min, max} is expected to evaluate to a 
    pair of real numbers.



* rspec

    Message names:
       RotateLeft::rspec:
       RotateRight::rspec:

    Message:
       Rotation specification expr should be a machine-size integer or list
       of machine-size integers.


    The second argument to RotateLeft and RotateRight is expected to be an 
    integer or a list of integers indicating the number of positions to 
    rotate.  *Example: RotateLeft[{a, b, c}, 2.6] -- the argument 2.6 is
    not an integer.



* rsrec

    Message names:
       Raster::rsrec:
       RasterArray::rsrec:

    Message:
       Second argument e_2 in expr is not a list of two coordinates.


    Generated when the second argument to Raster or RasterArray is not a 
    list of two coordinates, specifying corners of a rectangular region.
    *Coordinates can be given either as pairs of numbers {x,y} or as 
    scaled coordinates (using Scaled).



* rsval

    Message names:
       Raster::rsval:

    Message:
       Non-numerical value expr found at position spec in first argument of g.


    Generated when the indicated element in the first argument of Raster
    is not a machine-size real number.



* rvalue

    Message names:
       function::rvalue:

    Message:
       expr has not been assigned a value.


    Generated when the argument to Increment, Decrement, and related 
    functions has not been assigned a value.  *Functions such as Increment, 
    Decrement, and so forth, can only be used if the argument evaluates 
    to something other than itself.  *Example: If x has no value, the eight 
    functions x++, ++x, x--, --x, x *= n, x += n, x -= n, and x /= n will 
    not work.



* sample

    Message names:
       Play::sample:

    Message:
       Sample length n is not a positive machine-size integer.


    Generated when the number of sample points is not a positive integer,
    or cannot be represented as an integer on your computer.  *The number 
    of sample points is the product of the sample rate and the length of 
    the interval.



* sbuf

    Message names:
       SetStreamPosition::sbuf:

    Message:
       Requested position n in stream name is outside the file buffer;
          cannot reach outside the file buffer for non-disk files.


    Generated when a requested stream position is not available.



* sbyc

    Message names:
       Series::sbyc:

    Message:
       Warning: Division by a series with no coefficients in expr.


    Generated when a SeriesData object with no coefficients is encountered 
    in the denominator of an expression.  *Example: O[x]^-4 -- computing the 
    reciprocal of the SeriesData object represented by O[x] is mathematically 
    ambiguous.  *This message may be turned off if the notation O[x] is taken
    to represent a class of functions for which division is well-defined.



* scmd

    Message names:
       SeriesData::scmd:

    Message:
       Series s involves fractional powers.


    Generated when an inner series in series composition contains fractional
    powers of the expansion variable.



* scmn

    Message names:
       SeriesData::scmn:

    Message:
       Order of series s is negative.


    Generated when the order of an inner series in series composition is 
    negative.  *Example: Series[x, {x, 0, 1}] /. x -> Series[1/Sin[t], 
    {t, 0, 1}] --the order of this inner series is negative.



* scmp

    Message names:
       SeriesData::scmp:

    Message:
       The constant term of series s_1 doesn't match the expansion point of
          s_2.


    Generated in series composition when the series have different expansion 
    points.  *Series composition can only be used when the expansion points
    of the series are the same.



* sdatc

    Message names:
       SeriesData::sdatc:

    Message:
       Coefficient specification c in expr is not a list.


    Generated when the third argument to SeriesData is not a list.  The 
    third argument in a SeriesData object is expected to be a list of 
    coefficients.



* sdatd

    Message names:
       SeriesData::sdatd:

    Message:
       Power denominator specification n in expr is not a positive
          machine-size integer.


    Generated when the sixth argument to SeriesData is not a machine-size 
    integer.  *The sixth argument in a SeriesData object denotes the 
    denominator of the powers in the series expansion, and must be a 
    positive integer.



* sdatn

    Message names:
       SeriesData::sdatn:

    Message:
       Order specification n in expr is not a machine-size integer.


    Generated when the indicated argument in a SeriesData object is
    not a machine-size integer.  *The fourth argument in SeriesData 
    describes the lowest power in the series expansion, and the fifth 
    argument describes the highest power.



* sdep

    Message names:
       ListPlay::sdep:
       Play::sdep:

    Message:
       Value of option SampleDepth -> val should be a positive machine-size
          integer.


    Generated when the value of the SampleDepth option in Play or ListPlay 
    is not a positive integer, or is too large to be represented as a 
    machine integer on your computer.



* seed

    Message names:
       SeedRandom::seed:

    Message:
       Argument e_1 in expr should be an integer or a string.


    Generated when the argument to SeedRandom is an expression other
    than an integer or a string.



* seqlim

    Message names:
       SequenceLimit::seqlim:

    Message:
       Warning: The general form of the sequence could not be determined,
          and the result may be incorrect.


    Generated when the algorithm used by SequenceLimit is found to be 
    inappropriate for the partial sequence in the argument.  *Example: 
    SequenceLimit[{1, 0, 0, 1}] -- the partial sequence {1, 0, 0, 1} 
    does not match any of the patterns which can be handled by SequenceLimit.



* seqs

    Message names:
       General::seqs:

    Message:
       Sequence specification (+n, -n, {+n}, {-n}, or {m, n}) expected at
       position n in expr.


    Generated when the indicated function argument does not have the correct
    form for a sequence specification.  *Sequence specifications are used 
    in functions such as Drop, Take, StringDrop, and StringTake to indicate 
    sets of subexpressions.  *Example: Drop[{a, b, c, d}, {1, 2, 4}] -- the 
    argument {1, 2, 4} is not an integer or pair of integers and cannot be 
    used as a sequence specification.
 


* seqw

    Message names:
       SequenceLimit::seqw:

    Message:
       Sequence of length n_1 is too short for use with WynnDegree -> n_2.


    Generated when the length of the partial sequence in SequenceLimit
    is less than 2 ( n + 1 ) , where n  is the value of the WynnDegree 
    option.



* serlim

    Message names:
       Series::serlim:

    Message:
       Series limit specification expr is not a machine-size integer.


    Generated when the specification of the number of terms to compute
    in Series is not an integer.



* set

    Message names:
       $ModuleNumber::set:

    Message:
       Cannot set $ModuleNumber to val; value must be a positive integer.


    Generated when a value to be assigned to $ModuleNumber is not a positive 
    integer.



* setp

    Message names:
       Part::setp:

    Message:
       Part assignment to expr could not be made.


    Generated when a requested assignment to a part of an expression cannot 
    be completed.  *Example: x = 5 followed by x[[1]] = 1 -- the symbol x
    evaluates to 5, which has no parts.



* setpn

    Message names:
       Part::setpn:

    Message:
       Part specification spec in expr is not an integer.


    Generated in a part assignment when the part specifications are not 
    integers.  *Example: a[[b]] = 5 -- the symbol b is a part specification
    and should evaluate to an integer.



* setps

    Message names:
       Part::setps:

    Message:
       expr in assignment of part is not a symbol.


    Generated when the first argument to Part in an assignment is not
    a symbol.  *The notation e[[spec]] is equivalent to Part[e,spec].
    *Example: f[x_][[2]] := x^2 -- the expression f[x_] is not a symbol 
    and may not be used as the first argument to Part in an assignment.



* setraw

    Message names:
       Set::setraw:

    Message:
       Cannot assign to raw object x.


    Generated when Set ( = ) is used with a raw object.  *The most common 
    raw objects are numbers and strings.  *Example: 4 = x -- the integer 4 
    is a raw object and cannot be set to another value.



* sfq

    Message names:
       StringForm::sfq:

    Message:
       Unmatched backquote in expr.


    Generated when an unmatched backquote (`) character is encountered
    in a StringForm expression.
 


* sfr

    Message names:
       StringForm::sfr:

    Message:
       Item k requested in "controlstring" out of range; n items available.


    Generated when StringForm is called with fewer arguments than specified 
    in the control string.  *Example: StringForm["Entry `1` is `2`.", xx] -- 
    the control string (first argument) in StringForm requires two additional
    arguments, only one of which has been given.  *Since StringForm is used 
    to generate messages, this error can occur when the Message function is 
    called with fewer arguments than required by the message control string.
    *Example: Message[f::bad, 5] will cause this error if f::bad is set to 
    a control string such as f::bad = "Argument `1` in `2` is invalid." that 
    expects two or more arguments.



* shade

    Message names:
       SurfaceGraphics::shade:

    Message:
       Shading array expr is not the same shape as the z-value array.


    Generated when the second argument to SurfaceGraphics (shading 
    specification) is not an array, or has a shape which is not compatible
    with the array of height values (first argument).  *If the array of 
    height values has dimensions n X m, the array of shading values is 
    expected to have dimensions (n-1) X (m-1).



* shape

    Message names:
       Set::shape:

    Message:
       Lists list_1 and list_2 are not the same shape.


    Set and SetDelayed cannot be used for assignment with lists of unequal 
    length or shape.  *Example: {a, {b, c}} = {2, 4, 6} -- the shape of 
    the nested lists on the left-hand side of the assignment does not match 
    the shape of the list on the right-hand side.



* shdw

    Message names:
       function::shdw:

    Message:
       Warning: Symbol sym appears in multiple contexts list; definitions 
       in context c may shadow other definitions.


    Generated when a symbol with the same name is created in more than one 
    context.  *If a symbol exists in more than one context, only rules 
    attached to the symbol in the first context found are normally visible.
    *Rules attached to the symbol in a ``hidden'' context can be accessed
    using absolute context names.



* shell

    Message names:
       Run::shell:

    Message:
       Cannot execute shell.


    Generated when a Run command cannot be executed.



* shine

    Message names:
       SurfaceColor::shine:

    Message:
       Shininess specification e_3 in third argument of expr is not a 
          positive real number.


    Generated when the third argument to SurfaceColor is not a positive real 
    number.  *The third argument in SurfaceColor specifies the shininess
    of the surface.

 

* short

    Message names:
       Short::short:

    Message:
       Second argument expr should be a positive real number.


    Generated when the second argument in Short is not a positive
    real number.



* shx

    Message names:
       Show::shx:

    Message:
       No graphical objects to show.


    Generated when Show is called without any graphics expressions.
    *Example: Show[AspectRatio -> 3] -- the graphics object may have been 
    left out.



* sigz

    Message names:
       NumberForm::sigz:

    Message:
       Requested number format may result in trailing zeros which are not
          significant digits.


    Generated when the number of digits to be displayed in a number exceeds
    the number of numerically reliable digits.



* silent

    Message names:
       ListPlay::silent:

    Message:
       Warning: Sound in channel n is silent.


    Generated when the indicated sample in ListPlay results in a silent 
    sound.  *A sound will normally be silent if the sample amplitude is 
    constant or changes linearly with time.



* sing

    Message names:
       Inverse::sing:

    Message:
       Matrix m is singular.


    Generated when the argument to Inverse is a singular matrix.



* slnc

    Message names:
       SeriesData::slnc:

    Message:
       Argument expr in Log is a series with no coefficients.


    Generated when the argument in Log is a SeriesData object with no 
    coefficients.



* slot

    Message names:
       Function::slot:

    Message:
       e_1 (in expr) should contain a non-negative integer.


    Generated if the argument to Slot is not an integer or is negative.
    *Since Slot typically appears as an argument to Function, and since 
    Function has attribute HoldAll, an argument to Slot which might 
    otherwise evaluate to an integer will not be evaluated.  *Example: 
    x = 2 followed by Function[Slot[x] + 10] -- arguments to Function are 
    not normally evaluated since the function has attribute HoldAll.  The 
    function Evaluate can be used if it is necessary to evaluate the 
    arguments, as in Function[Evaluate[Slot[x] + 10]].



* slotn

    Message names:
       Function::slotn:

    Message:
       Slot number n in f cannot be filled from expr.


    Generated when Function receives fewer arguments than there are slots 
    to be filled.  *Example: f = (#1 Sin[#2] &) followed by f[x] -- the 
    Function specification #1 Sin[#2] & requires two arguments; try supplying 
    an additional argument, as in f[x, y].



* slotp

    Message names:
       Function::slotp:

    Message:
       e_1 (in expr) should contain a positive integer.


    Generated when the argument to SlotSequence is not an integer
    or is not positive.  *Example: Function[Slot[1] + {SlotSequence[x]}] 
    -- the argument x to SlotSequence is a symbol rather than a positive 
    integer.  *Note that since Function does not normally evaluate its 
    arguments (Function has attribute HoldAll) the previous example can
    fail even when x might otherwise evaluate to an appropriate value.
    *See slot.
 


* slots

    Message names:
       Function::slots:

    Message:
       SlotSequence[n] in f cannot be filled from expr.


    Generated when a Function expression receives an insufficient number 
    of arguments to fill a SlotSequence.  *Example: f = (#1 + ##3) & 
    followed by f[a] -- the SlotSequence specification ##3 is to be filled 
    with arguments after the third argument, and requires that there be 
    zero or more arguments in those positions.



* slwcon

    Message names:
       NIntegrate::slwcon:

    Message:
       Numerical integration converging too slowly; suspect one of 
          the following: singularity, oscillatory integrand, or 
	  insufficient WorkingPrecision.


    Generated when numerical integration does not appear to be converging.
    *Example: NIntegrate[Sin[x]/x^2, {x, 1, Infinity}] -- this integrand
    oscillates in magnitude and is difficult to integrate numerically.
    *Example: NIntegrate[1/x, {x, 0, 1}] -- the singularity at x = 1 is 
    not integrable.  *Example: NIntegrate[1/Sin[x]^2  1/(x - 2 Pi)^2, 
    {x, 6, 7}, PrecisionGoal -> 14, MaxRecursion -> 20] -- the default
    WorkingPrecision is too low for this integrand to converge.  
    Convergence can be achieved by either lowering the PrecisionGoal,
    as in NIntegrate[1/Sin[x]^2 - 1/(x - 2 Pi)^2, {x, 6, 7}], or raising 
    the working precision, as in NIntegrate[1/Sin[x]^2  1/(x - 2 Pi)^2, 
    {x, 6, 7}, PrecisionGoal -> 14, MaxRecursion -> 20, WorkingPrecision -> 
    40].



* sntx

    Message names:
       Syntax::sntx:

    Message:
       Syntax error in or before "input".


    Generated when a syntax error is encountered.



* sntxb

    Message names:
       Syntax::sntxb:

    Message:
       Expression cannot begin with "input".


    Generated when the first characters of input cannot be used to make
    a valid expression.  *Example: [1, 2, 3] -- there are no valid inputs 
    which begin with a square bracket ("[") character.



* sntxf

    Message names:
       Syntax::sntxf:

    Message:
       "input_1" cannot be followed by "input_2".


    Generated by invalid combinations of input characters.  *Example: a + 
    [ ] -- the input [ ] cannot be part of a sum.



* sntxh

    Message names:
       $SyntaxHandler::sntxh:

    Message:
       $SyntaxHandler returned expr, which is not a string or $Failed.


    Generated when the result of applying $SyntaxHandler to the input line 
    is not a string or $Failed.



* solex

    Message names:
       Solve::solex:

    Message:
       Solve can't handle one of the exponents.


    Generated when the exponent of a polynomial variable cannot be handled
    by internal code.  *Example: Solve[x^(10^20) == a x, x] -- the exponent 
    10^20 is too large for the algorithm used by Solve.



* specl

    Message names:
       SurfaceColor::specl:

    Message:
       Specularity specification e_2 in second argument of expr is not a 
          valid GrayLevel or RGBColor directive.


    Generated when the second argument to SurfaceColor is not a valid 
    GrayLevel or RGBColor directive.  *The second argument in SurfaceColor 
    specifies the specularity of the surface.

 

* spell

    Message names:
       General::spell:

    Message:
       Possible spelling error: new symbol name "sym" is similar to
          existing symbols list.


    Warning message generated when the spelling of a new symbol name is
    similar to the spelling of the names of existing symbols and may have
    been misspelled.

 

* spell1

    Message names:
       General::spell1:

    Message:
       Possible spelling error: new symbol name "sym_1" is similar to
          existing symbol "sym_2".


    Warning message generated when the spelling of a new symbol name is
    similar to the spelling of the name of an existing symbol and may have
    been misspelled.



* spfile

    Message names:
       Close::spfile:

    Message:
       Cannot close special file name.


    Generated by an attempt to close a file which must remain open.  
    Normally, the only files which cannot be closed are the system-dependent
    standard input and standard error files used by Mathematica to communicate
    with your computer.  *Example: Close /@ Streams[ ] -- the list returned 
    by Streams[ ] typically contains one or more files that cannot be closed.

 

* splicd

    Message names:
       Splice::splicd:

    Message:
       Missing right delimiter b at end of input file f.


    Generated when Splice cannot find a terminating delimiter for the 
    input to be processed.



* splicf

    Message names:
       Splice::splicf:

    Message:
       Cannot deduce output file name from expr.


    Generated when Splice is unable to determine the name of the file for 
    output.



* splict

    Message names:
       Splice::splict:

    Message:
       Cannot deduce output type from expr.


    Generated when Splice is unable to determine the type of output.



* splicx

    Message names:
       Splice::splicx:

    Message:
       Syntax error in Mathematica input expr.


    Generated when Splice encounters a syntax error in the input file.



* srate

    Message names:
       ListPlay::srate:
       Play::srate:

    Message:
       Value of option SampleRate -> val should be a positive machine-size
          real number.


    Generated when the value of the SampleRate option in Play or ListPlay 
    is not a positive number, or is too large to be represented as a 
    machine number on your computer.



* srep

    Message names:
       StringReplace::srep:

    Message:
       expr is not a valid string replacement rule.


    Generated when the indicated expression is expected to be a rule of the 
    form string_1 -> string_2.



* ssdn

    Message names:
       SeriesData::ssdn:

    Message:
       Attempt to evaluate a series at the number n; returning Indeterminate.


    Generated when a numerical value is substituted into a SeriesData 
    object.  *Example: Series[Sin[x], {x, 0, 3}] /. x -> 1 -- the SeriesData
    object returned by Series is only meaningful for symbolic arguments.
    The function Normal can be used to generate the corresponding polynomial.



* ssle

    Message names:
       function::ssle:

    Message:
       Symbol, string, or Literal[symbol] expected at position n in expr.


    Generated when the indicated function argument is not a symbol, a
    string (enclosed in double quotes), or a symbol enclosed in Literal.
    *Example: Context[f[t]] -- the expression f[t] is not a symbol; 
    Context[f] will return the context of the symbol f.



* ssnf

    Message names:
       Sound::ssnf:

    Message:
       Warning: n out of n_tot sample points did not evaluate to real numbers.


    Generated when the indicated number of sample points in a sound object
    are not real numbers.



* ssnm

    Message names:
       Sound::ssnm:

    Message:
       Warning: A good PlayRange could not be found since most of the
          samples are not evaluating to machine-size real numbers.


    Generated when an excessive number of non-numerical values are 
    encountered while constructing a sampled sound object.  *This message 
    should only appear for PlayRange -> Automatic.



* sspec

    Message names:
       Series::sspec:

    Message:
       Series specification expr is not a list with three elements.


    Generated when the second argument in Series is not a list with
    three elements.



* sstm

    Message names:
       SetOptions::sstm:

    Message:
       Argument e_i is not a symbol or a stream.


    Generated when the indicated argument in SetOptions is not a symbol
    or a stream.



* ssym

    Message names:
       Clear::ssym:
       ClearAll::ssym:
       Information::ssym:
       Remove::ssym:

    Message:
       expr is not a symbol or a string.


    Clear, ClearAll, Information (??s), and Remove can only be used with 
    symbols or strings.  *Example: Clear[f[t_]] -- the expression f[t_] 
    is not a symbol and cannot be cleared.  *Example:  Clear[{a, b, c}] 
    -- to clear several symbols enter each as a separate argument, as in 
    Clear[a, b, c].



* stackx

    Message names:
       Stack::stackx:

    Message:
       Expression number n does not exist in expr; there are m expressions
          of the requested form.


    Generated when the second argument to Stack is an integer greater than 
    the number of stack elements matching the requested form.  *Example: 
    Sin[(save = Stack[_, 4]); t] -- the evaulation stack will be only 3 
    levels deep when Stack[_, 4] is evaulated.



* stop

    Message names:
       General::stop:

    Message:
       Further output of message will be suppressed during this calculation.


    Generated when the indicated message has been produced for the third time.
    *Message suppression is included to prevent generation of redundant or 
    repetitive messages during long calculations.



* strc

    Message names:
       StringConversion::strc:
       $StringConversion::strc:

    Message:
       Function f applied to string s gives expr; a string is expected.


    Generated when the result of the indicated operation involving 
    StringConversion is not a string.
 


* stream

    Message names:
       function::stream:

    Message:
       expr is not a string, InputStream[ ], or OutputStream[ ].


    Generated when the indicated expression is not a string or an expression
    with a head of InputStream or OutputStream. *Example: Close[file] -- the 
    argument to Close should be a string or a stream, as in Close["file"].

 

* string

    Message names:
       function::string:

    Message:
       String expected at position n in expr.


    Generated when the indicated function argument is not a string.



* strj

    Message names:
       StringJoin::strj:

    Message:
       Expression e_n in expr is not a string.


    Generated when the indicated argument in StringJoin is not a string.



* strmi

    Message names:
       function::strmi:

    Message:
       First argument in stream is not a valid file or string identifier.


    Generated when the first argument in an InputStream or OutputStream 
    is not a string representing the name of a file, or an identifier for 
    a string used as a stream.  *Example: Close[OutputStream[sf, 3]] -- the 
    identifier sf should be a string or a symbol representing a string.



* strml

    Message names:
       function::strml:

    Message:
       expr is not a string, stream, or list of strings and streams.


    Generated when the indicated expression is not a string, an expression
    with a head of InputStream or OutputStream, or a list of expressions of 
    this form.



* strmn

    Message names:
       General::strmn:

    Message:
       Requested stream stream_1 does not match existing stream stream_2
          with the same stream number.


    Generated when a duplicate stream number is encountered during input 
    or output.  *Streams are assigned a unique number when they are opened.  
    An error occurs if the same number is used with a different stream.
    *Example: If OpenWrite["file1"] returns OutputStream[file1, 3], then 
    Write[OutputStream["file2", 3], data] is an error, since stream number 
    3 is associated with "file1" rather than "file2".  *The stream 
    identifier returned by the function used to open the stream (OpenAppend, 
    OpenRead, OpenTemporary, or OpenWrite) is generally valid, and 
    should be used whenever practical, rather than contructing an 
    equivalent identifier.



* strs

    Message names:
       function::strs:

    Message:
       String or non-empty list of strings expected at position n in expr.


    Generated when the indicated function argument is not a string or 
    a non-empty list of strings.  *Example: Find[OpenRead["file"], test] -- 
    to search "file" for the string "test", use Find[OpenRead["file"], 
    "test"].



* stset

    Message names:
       $StringOrder::stset:

    Message:
       Cannot set $StringOrder to val; value is not a list of strings or
          string lists.


    Generated when a value to be assigned to $StringOrder is not a list,
    or when an element of the list is neither a string nor a list of
    strings.



* subn

    Message names:
       Subscripted::subn:

    Message:
       Subscripting specification expr is not of the form n or {n1, n2}.


    Generated when the second or third argument to Subscripted is not an 
    integer or a list of two integers.



* subv

    Message names:
       Subscripted::subv:

    Message:
       Warning: Specifications for superscripts and subscripts overlap.


    Generated when the subscript and superscript specifications in 
    Subscripted overlap.



* subx

    Message names:
       Subscripted::subx:

    Message:
       Warning: Positions specified by expr are not available in expression
          of length n.


    Generated when the indicated subscript or superscript positions are
    beyond the ends of the expression to be formatted.



* svdf

    Message names:
       SingularValues::svdf:

    Message:
       SingularValues has received a matrix with infinite precision.


    Generated when the precision of the argument to SingularValues is 
    Infinity.  *SingularValues will only work for finite-precision matrices.
    *Example: SingularValues[{{1, 2}, {3, 4}}] -- all of the matrix entries 
    are exact integers; the function N can be used to set the precision of 
    the matrix, as in SingluarValues[N[{{1, 2}, {3, 4}}]].



* svdn

    Message names:
       SingularValues::svdn:

    Message:
       SingularValues has received a matrix with non-numerical elements.


    SingularValues[M] requires that all elements of the matrix M be numerical.
    *If non-numerical values are found, the function N can sometimes be 
    helpful in converting the entries to numbers.  *Example: SingularValues
    [{{1.2, 0.7}, {3.1, x}}] -- try replacing x with a numerical value.

 

* sym

    Message names:
       function::sym:

    Message:
       Argument expr at position n is expected to be a symbol.


    Generated when the indicated function argument is not a symbol.



* tag

    Message names:
       function::tag:

    Message:
       Rule for expr is not attached to sym.


    Generated when tagged assignments (TagSet and TagSetDelayed) are used 
    incorrectly with certain functions which attach rules to argument symbols.
    *Affected functions include Attributes, Context, Default, Format, 
    MessageName (symbol::tag), and N.  *Example: x/: Attributes[f] = HoldAll 
    -- an assignment to Attributes[f] requires that the rule be attached to f
    and not to another symbol.



* tagnf

    Message names:
       TagSet::tagnf:

       TagSetDelayed::tagnf:

       TagUnset::tagnf:

    Message:
       Tag sym not found in expr.


    Generated when the tag symbol is not found in the expression on the
    left side of a tagged assignment.  *TagSet (f/: lhs = rhs) and 
    TagSetDelayed (f/: lhs := rhs) look one level deep in lhs for the tag 
    symbol f.  *Example: x/: f[t_] = x -- the tag symbol x does not appear
    on the left-hand side ( f[t_] ) of the assignment.



* tagpos

    Message names:
       TagSet::tagpos:
       TagSetDelayed::tagpos:
       TagUnset::tagpos:

    Message:
       Tag sym in expr is not in a valid position for assignment.


    Generated when the tag symbol on the left side of a tagged assignment
    cannot be used as a tag.  *TagSet (f/: lhs = rhs) and TagSetDelayed
    (f/: lhs := rhs) look one level deep in lhs for the tag symbol f.  
    *Example: x/: f[a_ x] := a -- the tag symbol x is two levels deep in 
    f[a_ x], since f[a_ x] is equivalent to f[Times[a_, x]]. The symbols 
    f and Times can be used as tags for this rule.  *Example: t/: f[t_] := 
    t^2 -- the left-hand side is f[Pattern[t, _]], so t is too deep to be 
    used as a tag.



* take

    Message names:
       StringTake::take:
       Take::take:

    Message:
       Cannot take positions n_1 through n_2 in expr.


    Generated when the second argument to Take or StringTake specifies 
    positions which are not available in the first argument.  *Example: 
    Take[{{1, 2, 3}}, {2}] -- position {2} does not exist in the expression 
    {{1, 2, 3}} with length 1.  *Example: StringTake["abcd", {2, 5}] -- 
    only positions 1 through 4 are available in string "abcd" with length 4.

 

* tdep

    Message names:
       Solve::tdep:

    Message:
       The equations appear to involve transcendental functions of the
          variables in an essentially non-algebraic way.


    Generated when Solve determines that the equations do not have
    an elementary solution.  *Example: Solve[5 x == Exp[x], x, 
    InverseFunctions -> False] -- the solution to this equation is a 
    transcendental number.



* tdlen

    Message names:
       Thread::tdlen:

    Message:
       Objects of unequal length in expr cannot be combined.


    Generated when an attempt is made to thread a function over lists of 
    unequal length.  *Example: Thread[f[{1, 2, 3}, {a, b}]] -- threading 
    cannot be done since the arguments {1, 2, 3} and {a, b} have different 
    lengths.  *Several functions other than Thread automatically thread over
    list arguments and can lead to this error.



* tdn

    Message names:
       ToDate::tdn:

    Message:
       First argument e_1 should be an integer.


    Generated when the argument in ToDate is not an integer.



* textn

    Message names:
       Text::textn:

    Message:
       Text offset expr is not a pair of numbers.


    Generated when the third argument to Text is not a list containing
    two real numbers.  *Example: Show[Graphics[Text["abc", {1, 2}, 5]]] 
    -- the third argument to Text is the integer 5, which is not a pair 
    of numbers.



* textz

    Message names:
       Text::textz:

    Message:
       Vector for text rotation cannot have value {0,0}.


    Generated when the text rotation vector in a Text graphics primitive is 
    {0,0}.

 

* tfal

    Message names:
       TableForm::tfal:

    Message:
       Value of option TableAlignments -> val should be a list of alignment
          specifications (Top, Bottom, and Center for column dimensions, or
          Left, Right, and Center for row dimensions).


    Generated when the value of the TableAlignments option in TableForm does 
    not have the indicated form.  *The value of the TableAlignments option 
    is expected to be a list {a_1, a_2, ... } in which a_i specifies the 
    alignment of dimension i.



* tfdir

    Message names:
       TableForm::tfdir:

    Message:
       Value of option TableDirections -> val should be Row, Column, or a
          non-empty list of these values.


    Generated when the value of the TableDirections option in TableForm does 
    not have the indicated form.  *The value of the TableDirections option 
    is expected to be either Row or Column, specifying the direction to 
    format the first dimension of the table, or a non-empty list {d_1, d_2, 
    ... } in which d_i specifies the direction to format dimension i.

 

* tfh

    Message names:
       TableForm::tfh:

    Message:
       TableHeadings option contained expr, which is not Automatic, None, or
          a list of labels.


    Generated when the indicated expression from the value of the 
    TableHeadings option is not Automatic, None, or a list of expressions 
    to be used as labels.



* tfsp

    Message names:
       TableForm::tfsp:

    Message:
       Value of option TableSpacing -> val should be Automatic or a list of
          non-negative machine-size integers.


    Generated when the value of the TableSpacing options is not Automatic or 
    a list of integers.



* thkn

    Message names:
       AbsoluteThickness::thkn:
       Thickness::thkn:

    Message:
       The argument in expr is not a number.


    Generated when the argument to Thickness or AbsoluteThickness is not 
    a number.  *Example: grid = {{.5, {Thickness[a]}}} and face = {0, 0, 1} 
    followed by Plot3D[x y, {x, 0, 1}, {y, 0, 1}, FaceGrids -> {{face, {{}, 
    grid}}}] --the argument to Thickness should be a number, as in 
    Thickness[.1].



* throw

    Message names:
       CompoundExpression::throw:

    Message:
       Uncaught expr returned to top level.


    Generated when Throw is used incorrectly without a corresponding
    Catch.



* ticks

    Message names:
       Ticks::ticks:

    Message:
       expr is not a valid tick specification.


    The value of the Ticks option is expected to be None, Automatic, or a 
    list describing the position, labels, and style for the tick marks on 
    each axis.  *Example: Plot[Sin[x], {x, 0, 4}, Ticks -> {{1, a}, {2, b}, 
    {3, c}}] -- in two-dimensional plots, the value Ticks should be a list
    with two elements, one for each of the axes; to specify ticks for only 
    one axis, use Ticks -> {{{1, a}, {2, b}, {3, c}}, None}.



* timc

    Message names:
       TimeConstrained::timc:

    Message:
       Number of seconds expr is not a positive integer.


    Generated when the second argument in TimeConstrained is not a positive 
    machine-size integer.



* toascii

    Message names:
       ToASCII::toascii:

    Message:
       Argument expr is not a single-character string.


    Generated when the indicated argument in ToASCII is not a string with 
    exactly one character. *Note that ToASCII is obsolete function, 
    superseded by ToCharacterCode.



* tocol

    Message names:
       ToColor::tocol:

    Message:
       First argument expr in ToColor should be a valid color directive.


    Generated when the first argument of ToColor is not a valid color or 
    gray-level specification.



* tol

    Message names:
       NullSpace::tol:
       PseudoInverse::tol:
       SingularValues::tol:

    Message:
       Value of option Tolerance -> expr is not a non-negative real number
          or Automatic.


    The value of the Tolerance option is normally required to be a real 
    number or Automatic.



* tolnn

    Message names:
       Chop::tolnn:
       Rationalize::tolnn:

    Message:
       Tolerance specification expr must be a non-negative number.


    Generated when the second argument to Chop and Rationalize is negative 
    or is not a real number.  *Example: Rationalize[3.14, x] -- the symbol
    x should evaluate to a non-negative real number.



* toobig

    Message names:
       Format::toobig:

    Message:
       Expression too big for output.


    Generated when output formatting functions are unable to produce output 
    with the requested format.  *Example: Write[OpenWrite["data", TotalWidth 
    -> 2], 123.45678] -- the number 123.45678 is too wide to be formatted 
    when the value of TotalWidth is 2; try setting TotalWidth to a larger 
    value.



* tperm

    Message names:
       Transpose::tperm:

    Message:
       Permutation p is longer than the dimensions dims of the array.


    Generated when Transpose is called to permute dimensions which are not 
    present in the first argument.  *If Transpose is called with one argument, 
    it transposes the outer two dimensions.  *Example: Transpose[{a, b}, 
    {2, 1}] -- the argument {a, b} is a one-dimensional array, so the 
    two-dimensional permutation {2, 1} is not meaningful.



* tpmax

    Message names:
       Transpose::tpmax:

    Message:
       Coordinate permutation expr is too deep.


    Generated when the depth of the permutation requested in the second
    argument to Transpose exceeds a maximum depth.  *On most computers, 
    the maximum number of transpose dimensions is 512.



* tpos

    Message names:
       Thread::tpos:

    Message:
       Cannot thread over positions n_1 through n_2 in expr.


    Generated when the third argument (position list) in Thread is
    incompatible with the available positions in the first argument.
    *Example: Thread[f[{1, 2, 3}, {a, b, c}], List, {3}] -- the position
    list {3} requests threading over a position which does not exist in 
    f[{1, 2, 3}, {a, b, c}].




* tracb

    Message names:
       Trace::tracb:
       TraceDialog::tracb:
       TracePrint::tracb:
       TraceScan::tracb:

    Message:
       Value of option TraceAbove -> val should be False, True, All, or a
          list of two of these symbols.


    The value of the TraceAbove option is expected to be True, False, All, 
    or a list of two of these symbols, as in TraceAbove -> {False, True}.



* tracd

    Message names:
       Trace::tracd:
       TraceDialog::tracd:
       TracePrint::tracd:
       TraceScan::tracd:

    Message:
       Value of option opt -> val should be False, True, or All.


    Generated when the value of the TraceBackward or TraceForward option 
    is not True, False, or All.




* trace

    Message names:
       function::trace:

    Message:
       rhs --> lhs.


    Informational message generated while tracing evaluation.

 

* under

    Message names:
       General::under:

    Message:
       Underflow occurred in computation.


    Generated when underflow occurs during arithmetic.  *Example: 
    $MinNumber/1000 -- dividing the smallest representable number by 1000 
    results in arithmetic underflow.



* unlink

    Message names:
       Uninstall::unlink:

    Message:
       External package p has not been installed.


    Generated when the argument to Uninstall does not correspond to an 
    open LinkObject.



* using

    Message names:
       Use::using:

    Message:
       expr has caused replacement of e_1 with e_2 for further evaluation.


    Informational message generated by evaluation of Use during tracing.



* usraw

    Message names:
       Unset::usraw:

    Message:
       Cannot unset raw object val.


    Generated when Unset ( =. ) is used with a raw object.  *The most 
    common raw objects are numbers and strings.  *Example: 4 =. -- the 
    integer 4 is a raw object and cannot be unset.



* usym

    Message names:
       Unique::usym:

    Message:
       expr is not a symbol or a valid symbol name.


    Generated when the first argument to Unique is not a symbol, a string 
    containing a parsable symbol name, or a list of symbols and symbol 
    names.  *Example: Unique[3x] -- the expression 3x is interpreted
    as Times[3, x], which is not a symbol.  *Example: Unique["c`"] -- the 
    backquote character (`) identifies contexts, and may not be used as 
    the last character of a symbol.  *Symbol names can include most 
    alphanumeric characters, provided that the first character is not a 
    number, and the backquote character is only used to identify contexts.

 

* vars

    Message names:
       NIntegrate::vars:

    Message:
       Integration range specification expr is not of the form
          {x, xmin, ..., xmax}.


    The second argument to NIntegrate is expected to be a list with 
    three or more elements, in which the first element is a valid variable 
    and subsequent elements are numerical when evaluated.



* vcnt

    Message names:
       Series::vcnt:

    Message:
       Center point a of power series expansion involves the variable x.


    Generated when the expansion point of a series contains the 
    expansion variable.  *Example: Series[Sin[x], {x, x  1, 2}] -- the 
    expansion point x - 1 contains the variable x.



* viewc

    Message names:
       ViewCenter::viewc:

    Message:
       A projection cannot be constructed for a ViewCenter which coincides
          with a ViewPoint.


    Generated when the ViewPoint and the ViewCenter are in the same 
    location.



* viewp

    Message names:
       ViewPoint::viewp:

    Message:
       A projection cannot be constructed for a ViewPoint inside the
          bounding box.


    Generated when the value of the ViewPoint option lies inside the 
    bounding box of a three-dimensional image.



* viewv

    Message names:
       ViewVertical::viewv:

    Message:
       The ViewVertical vector must have a non-zero component perpendicular
          to a line from the ViewPoint to the ViewCenter.


    Generated when the value of the ViewVertical option corresponds to a 
    point along a line from the ViewPoint to the ViewCenter.



* vlist

    Message names:
       DefaultValues::vlist:
       DownValues::vlist:
       FormatValues::vlist:
       Messages::vlist:
       NValues::vlist:
       OwnValues::vlist:
       SubValues::vlist:
       UpValues::vlist:

    Message:
       Cannot set expr to val; value must be a list of rules.


    Generated when the left-hand side of an assignment to the indicated
    expression is not a list of rules.  *Example: Messages[f] = "invalid" -- 
    the string "invalid" is not a rule; each message requires an identifier, 
    as in Messages[f] = {f::err :> "invalid"}.



* vrule

    Message names:
       DefaultValues::vrule:
       DownValues::vrule:
       FormatValues::vrule:
       Messages::vrule:
       NValues::vrule:
       OwnValues::vrule:
       SubValues::vrule:
       UpValues::vrule:

    Message:
       Cannot set expr to val; value contains e_n, which is not a rule.


    Generated when the left-hand side of a value assignment contains 
    elements which are not rules.  *Example: Messages[f] = {"invalid1", 
    "invalid2"} -- each element of the Message list must be a rule, as in
    Messages[f] = {f::err1 :> "invalid1", f::err2 :> "invalid2"}.



* write

    Message names:
       function::write:

    Message:
       Tag sym in expr is Protected.


    Generated by an attempt to modify the rules attached to a protected 
    symbol.  *A symbol s is protected if Attributes[s] includes Protected.
    *Example: Integrate[f[x], x] = g[x] -- the symbol Integrate is protected; 
    try unprotecting the symbol (Unprotect[Integrate]) before adding rules.
    *Example: Sum[x, {2 x, 4}] -- the iterator 2 x is a product (with a head 
    of Times).  The symbol Times is protected so Sum cannot make assignments 
    to it.  *Example: a b = c -- this assignment to the product a b will try 
    to attach a rule to the head of the product, which is Times, and generate 
    a message if Times has not been unprotected.



* wrsym

    Message names:
       function::wrsym:

    Message:
       Symbol sym is Protected.


    The value of a protected symbol cannot be set or cleared.  *Example: 
    Protect[x] followed by x = 5 -- the function Protect[x] adds Protected 
    to the attributes of x, after which assignments such as x = 5 will not 
    work.  *Example: Protect[y] followed by y[[1]] = 4 -- the function 
    Protect[y] prevents assignments to the symbol y.  *If you need to make 
    assignments to protected symbols, they must first be unprotected, using 
    Unprotect.



* wynn

    Message names:
       SequenceLimit::wynn:

    Message:
       Value of option WynnDegree -> expr should be a positive machine-size
          integer or infinity.


    Generated when the value of the WynnDegree option in SequenceLimit is 
    not a positive integer or infinity.



* zval

    Message names:
       ContourGraphics::zval:
       DensityGraphics::zval:

    Message:
       Non-numerical value val found at position pos in first argument.


    Generated when a non-numerical value is found in the first argument 
    of a DensityGraphics or ContourGraphics object.  *Example: 
    Show[DensityGraphics[{{a, b}, {c, d}}]] -- the first argument in 
    DensityGraphics is expected to be an array of machine-size real
    numbers.



* zvec

    Message names:
       DSolve::zvec:
       MatrixExp::zvec:
       MatrixPower::zvec:

    Message:
       Cannot compute f since the argument matrix m has a zero eigenvector.


    Generated when the indicated operation cannot be performed due to a zero
    eigenvector in the argument matrix.
